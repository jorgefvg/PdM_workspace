
Proyecto_Final4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ac8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004c68  08004c68  00014c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d2c  08004d2c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d2c  08004d2c  00014d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d34  08004d34  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d34  08004d34  00014d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d38  08004d38  00014d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004d3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  2000005c  08004d98  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08004d98  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010bff  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029f9  00000000  00000000  00030cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc0  00000000  00000000  000336c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c4c  00000000  00000000  00034688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000189e9  00000000  00000000  000352d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015aa2  00000000  00000000  0004dcbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009013a  00000000  00000000  0006375f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000045d4  00000000  00000000  000f389c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000f7e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004c50 	.word	0x08004c50

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004c50 	.word	0x08004c50

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b096      	sub	sp, #88	; 0x58
 8000580:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000582:	f000 feb1 	bl	80012e8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000586:	f000 fb27 	bl	8000bd8 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	delayInit(&delay_TIME_MESSAGE, TIME_MESSAGE);
 800058a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800058e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000592:	4618      	mov	r0, r3
 8000594:	f000 fbfe 	bl	8000d94 <delayInit>
	delayInit(&delay_INITIAL, TIME_INITIAL);
 8000598:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800059c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fbf7 	bl	8000d94 <delayInit>
	delayInit(&delay_READ, TIME_READ);
 80005a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005aa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 fbf0 	bl	8000d94 <delayInit>
	delayInit(&delay_WRITE, TIME_WRITE);
 80005b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005b8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 fbe9 	bl	8000d94 <delayInit>
	delayInit(&delay_TIME_LED1, TIME_LED1);
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	21c8      	movs	r1, #200	; 0xc8
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 fbe3 	bl	8000d94 <delayInit>
	delayInit(&delay_TIME_LED2, TIME_LED2);
 80005ce:	f107 0310 	add.w	r3, r7, #16
 80005d2:	21c8      	movs	r1, #200	; 0xc8
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 fbdd 	bl	8000d94 <delayInit>
	delayInit(&delay_TIME_LED3, TIME_LED3);
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	21c8      	movs	r1, #200	; 0xc8
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 fbd8 	bl	8000d94 <delayInit>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	//Inicializa todos los elemnetos a usar por la MEF
	MX_GPIO_Init();
 80005e4:	f000 fc1a 	bl	8000e1c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005e8:	f000 fe54 	bl	8001294 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80005ec:	f000 fca8 	bl	8000f40 <MX_I2C1_Init>
	MX_TIM3_Init();
 80005f0:	f000 fdbc 	bl	800116c <MX_TIM3_Init>
	lcd_init();
 80005f4:	f000 fd68 	bl	80010c8 <lcd_init>

	actualState = INITIAL;
 80005f8:	4b58      	ldr	r3, [pc, #352]	; (800075c <main+0x1e0>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
	delayRead(&delay_TIME_MESSAGE);
 80005fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000602:	4618      	mov	r0, r3
 8000604:	f000 fbdd 	bl	8000dc2 <delayRead>
	delayRead(&delay_INITIAL); //Inicia conteo del delay la primera vez que se ejecuta
 8000608:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fbd8 	bl	8000dc2 <delayRead>
	delayRead(&delay_READ);
 8000612:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000616:	4618      	mov	r0, r3
 8000618:	f000 fbd3 	bl	8000dc2 <delayRead>
	delayRead(&delay_WRITE);
 800061c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000620:	4618      	mov	r0, r3
 8000622:	f000 fbce 	bl	8000dc2 <delayRead>
	delayRead(&delay_TIME_LED1);
 8000626:	f107 031c 	add.w	r3, r7, #28
 800062a:	4618      	mov	r0, r3
 800062c:	f000 fbc9 	bl	8000dc2 <delayRead>
	delayRead(&delay_TIME_LED2);
 8000630:	f107 0310 	add.w	r3, r7, #16
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fbc4 	bl	8000dc2 <delayRead>
	delayRead(&delay_TIME_LED3);
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	4618      	mov	r0, r3
 800063e:	f000 fbc0 	bl	8000dc2 <delayRead>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		/* USER CODE BEGIN 3 */

		switch (actualState)
 8000642:	4b46      	ldr	r3, [pc, #280]	; (800075c <main+0x1e0>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b02      	cmp	r3, #2
 8000648:	d053      	beq.n	80006f2 <main+0x176>
 800064a:	2b02      	cmp	r3, #2
 800064c:	dc7c      	bgt.n	8000748 <main+0x1cc>
 800064e:	2b00      	cmp	r3, #0
 8000650:	d002      	beq.n	8000658 <main+0xdc>
 8000652:	2b01      	cmp	r3, #1
 8000654:	d024      	beq.n	80006a0 <main+0x124>
 8000656:	e077      	b.n	8000748 <main+0x1cc>
		{
		case INITIAL: //Estado inicial solo muestra mensaje y pasa una vez al inicio
			if(delayRead(&delay_INITIAL)) //Cuando se cumple el tiempo establecido
 8000658:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800065c:	4618      	mov	r0, r3
 800065e:	f000 fbb0 	bl	8000dc2 <delayRead>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d005      	beq.n	8000674 <main+0xf8>
			{
				actualState = READ; //Pasa al siguiente estado
 8000668:	4b3c      	ldr	r3, [pc, #240]	; (800075c <main+0x1e0>)
 800066a:	2201      	movs	r2, #1
 800066c:	701a      	strb	r2, [r3, #0]
				writeLedOff_GPIO(LED1);
 800066e:	2001      	movs	r0, #1
 8000670:	f000 fc44 	bl	8000efc <writeLedOff_GPIO>
			}
			if(delayRead(&delay_TIME_MESSAGE))
 8000674:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000678:	4618      	mov	r0, r3
 800067a:	f000 fba2 	bl	8000dc2 <delayRead>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <main+0x10c>
			{
				API_Initial();
 8000684:	f000 fb28 	bl	8000cd8 <API_Initial>
			}
			if(delayRead(&delay_TIME_LED1))
 8000688:	f107 031c 	add.w	r3, r7, #28
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fb98 	bl	8000dc2 <delayRead>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d05a      	beq.n	800074e <main+0x1d2>
			{
				toggleLed_GPIO(LED1);
 8000698:	2001      	movs	r0, #1
 800069a:	f000 fc41 	bl	8000f20 <toggleLed_GPIO>
			}
			break;
 800069e:	e056      	b.n	800074e <main+0x1d2>

		case READ://Estado de lectura de datos
			if(delayRead(&delay_READ))
 80006a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 fb8c 	bl	8000dc2 <delayRead>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d005      	beq.n	80006bc <main+0x140>
			{
				actualState = WRITE; //Pasa al estado siguiente
 80006b0:	4b2a      	ldr	r3, [pc, #168]	; (800075c <main+0x1e0>)
 80006b2:	2202      	movs	r2, #2
 80006b4:	701a      	strb	r2, [r3, #0]
				writeLedOff_GPIO(LED2);
 80006b6:	2020      	movs	r0, #32
 80006b8:	f000 fc20 	bl	8000efc <writeLedOff_GPIO>
			}
			if(delayRead(&delay_TIME_MESSAGE))
 80006bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 fb7e 	bl	8000dc2 <delayRead>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d006      	beq.n	80006da <main+0x15e>
			{
				API_Read_Measuring();
 80006cc:	f000 fb1c 	bl	8000d08 <API_Read_Measuring>
				distance1 = API_distance();
 80006d0:	f000 faf4 	bl	8000cbc <API_distance>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4a22      	ldr	r2, [pc, #136]	; (8000760 <main+0x1e4>)
 80006d8:	6013      	str	r3, [r2, #0]
			}
			if(delayRead(&delay_TIME_LED2))
 80006da:	f107 0310 	add.w	r3, r7, #16
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 fb6f 	bl	8000dc2 <delayRead>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d033      	beq.n	8000752 <main+0x1d6>
			{
				toggleLed_GPIO(LED2);
 80006ea:	2020      	movs	r0, #32
 80006ec:	f000 fc18 	bl	8000f20 <toggleLed_GPIO>
			}
			break;
 80006f0:	e02f      	b.n	8000752 <main+0x1d6>


		case WRITE://Estado de lectura de datos
			if(delayRead(&delay_WRITE))
 80006f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 fb63 	bl	8000dc2 <delayRead>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d005      	beq.n	800070e <main+0x192>
			{
				actualState = READ; //Pasa al estado anterior
 8000702:	4b16      	ldr	r3, [pc, #88]	; (800075c <main+0x1e0>)
 8000704:	2201      	movs	r2, #1
 8000706:	701a      	strb	r2, [r3, #0]
				writeLedOff_GPIO(LED3);
 8000708:	2002      	movs	r0, #2
 800070a:	f000 fbf7 	bl	8000efc <writeLedOff_GPIO>
			}
			if(delayRead(&delay_TIME_MESSAGE))
 800070e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000712:	4618      	mov	r0, r3
 8000714:	f000 fb55 	bl	8000dc2 <delayRead>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d009      	beq.n	8000732 <main+0x1b6>
			{
				API_Write_LCD16X2(distance1);
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <main+0x1e4>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4618      	mov	r0, r3
 8000724:	f000 fb08 	bl	8000d38 <API_Write_LCD16X2>
				API_Write_UART(distance1);
 8000728:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <main+0x1e4>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4618      	mov	r0, r3
 800072e:	f000 fd8d 	bl	800124c <API_Write_UART>
			}
			if(delayRead(&delay_TIME_LED3))
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	4618      	mov	r0, r3
 8000736:	f000 fb44 	bl	8000dc2 <delayRead>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d00a      	beq.n	8000756 <main+0x1da>
			{
				toggleLed_GPIO(LED3);
 8000740:	2002      	movs	r0, #2
 8000742:	f000 fbed 	bl	8000f20 <toggleLed_GPIO>
			}
			break;
 8000746:	e006      	b.n	8000756 <main+0x1da>

		default:
			Error_Handler();
 8000748:	f000 fab2 	bl	8000cb0 <Error_Handler>
			break;
 800074c:	e004      	b.n	8000758 <main+0x1dc>
			break;
 800074e:	bf00      	nop
 8000750:	e777      	b.n	8000642 <main+0xc6>
			break;
 8000752:	bf00      	nop
 8000754:	e775      	b.n	8000642 <main+0xc6>
			break;
 8000756:	bf00      	nop
		switch (actualState)
 8000758:	e773      	b.n	8000642 <main+0xc6>
 800075a:	bf00      	nop
 800075c:	20000078 	.word	0x20000078
 8000760:	2000007c 	.word	0x2000007c

08000764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <HAL_MspInit+0x4c>)
 8000770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000772:	4a0f      	ldr	r2, [pc, #60]	; (80007b0 <HAL_MspInit+0x4c>)
 8000774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000778:	6453      	str	r3, [r2, #68]	; 0x44
 800077a:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <HAL_MspInit+0x4c>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	603b      	str	r3, [r7, #0]
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <HAL_MspInit+0x4c>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078e:	4a08      	ldr	r2, [pc, #32]	; (80007b0 <HAL_MspInit+0x4c>)
 8000790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000794:	6413      	str	r3, [r2, #64]	; 0x40
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <HAL_MspInit+0x4c>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007a2:	2007      	movs	r0, #7
 80007a4:	f000 ff06 	bl	80015b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40023800 	.word	0x40023800

080007b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a19      	ldr	r2, [pc, #100]	; (8000838 <HAL_I2C_MspInit+0x84>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d12b      	bne.n	800082e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <HAL_I2C_MspInit+0x88>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a17      	ldr	r2, [pc, #92]	; (800083c <HAL_I2C_MspInit+0x88>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <HAL_I2C_MspInit+0x88>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007f2:	23c0      	movs	r3, #192	; 0xc0
 80007f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007f6:	2312      	movs	r3, #18
 80007f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fe:	2303      	movs	r3, #3
 8000800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000802:	2304      	movs	r3, #4
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	480c      	ldr	r0, [pc, #48]	; (8000840 <HAL_I2C_MspInit+0x8c>)
 800080e:	f000 ff13 	bl	8001638 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <HAL_I2C_MspInit+0x88>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <HAL_I2C_MspInit+0x88>)
 800081c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000820:	6413      	str	r3, [r2, #64]	; 0x40
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_I2C_MspInit+0x88>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800082e:	bf00      	nop
 8000830:	3728      	adds	r7, #40	; 0x28
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40005400 	.word	0x40005400
 800083c:	40023800 	.word	0x40023800
 8000840:	40020400 	.word	0x40020400

08000844 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a1d      	ldr	r2, [pc, #116]	; (80008d8 <HAL_TIM_Base_MspInit+0x94>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d133      	bne.n	80008ce <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <HAL_TIM_Base_MspInit+0x98>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	4a1b      	ldr	r2, [pc, #108]	; (80008dc <HAL_TIM_Base_MspInit+0x98>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	6413      	str	r3, [r2, #64]	; 0x40
 8000876:	4b19      	ldr	r3, [pc, #100]	; (80008dc <HAL_TIM_Base_MspInit+0x98>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <HAL_TIM_Base_MspInit+0x98>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a14      	ldr	r2, [pc, #80]	; (80008dc <HAL_TIM_Base_MspInit+0x98>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b12      	ldr	r3, [pc, #72]	; (80008dc <HAL_TIM_Base_MspInit+0x98>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800089e:	2340      	movs	r3, #64	; 0x40
 80008a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80008ae:	2302      	movs	r3, #2
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4619      	mov	r1, r3
 80008b8:	4809      	ldr	r0, [pc, #36]	; (80008e0 <HAL_TIM_Base_MspInit+0x9c>)
 80008ba:	f000 febd 	bl	8001638 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2100      	movs	r1, #0
 80008c2:	201d      	movs	r0, #29
 80008c4:	f000 fe81 	bl	80015ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80008c8:	201d      	movs	r0, #29
 80008ca:	f000 fe9a 	bl	8001602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008ce:	bf00      	nop
 80008d0:	3728      	adds	r7, #40	; 0x28
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40000400 	.word	0x40000400
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020000 	.word	0x40020000

080008e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a19      	ldr	r2, [pc, #100]	; (8000968 <HAL_UART_MspInit+0x84>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d12b      	bne.n	800095e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <HAL_UART_MspInit+0x88>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	4a17      	ldr	r2, [pc, #92]	; (800096c <HAL_UART_MspInit+0x88>)
 8000910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000914:	6413      	str	r3, [r2, #64]	; 0x40
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <HAL_UART_MspInit+0x88>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <HAL_UART_MspInit+0x88>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a10      	ldr	r2, [pc, #64]	; (800096c <HAL_UART_MspInit+0x88>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <HAL_UART_MspInit+0x88>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800093e:	230c      	movs	r3, #12
 8000940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800094e:	2307      	movs	r3, #7
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	4805      	ldr	r0, [pc, #20]	; (8000970 <HAL_UART_MspInit+0x8c>)
 800095a:	f000 fe6d 	bl	8001638 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800095e:	bf00      	nop
 8000960:	3728      	adds	r7, #40	; 0x28
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40004400 	.word	0x40004400
 800096c:	40023800 	.word	0x40023800
 8000970:	40020000 	.word	0x40020000

08000974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000978:	e7fe      	b.n	8000978 <NMI_Handler+0x4>

0800097a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <HardFault_Handler+0x4>

08000980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <MemManage_Handler+0x4>

08000986 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <BusFault_Handler+0x4>

0800098c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <UsageFault_Handler+0x4>

08000992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c0:	f000 fce4 	bl	800138c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80009cc:	4802      	ldr	r0, [pc, #8]	; (80009d8 <TIM3_IRQHandler+0x10>)
 80009ce:	f002 fae3 	bl	8002f98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000084 	.word	0x20000084

080009dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e4:	4a14      	ldr	r2, [pc, #80]	; (8000a38 <_sbrk+0x5c>)
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <_sbrk+0x60>)
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f0:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <_sbrk+0x64>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d102      	bne.n	80009fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <_sbrk+0x64>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <_sbrk+0x68>)
 80009fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <_sbrk+0x64>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d207      	bcs.n	8000a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a0c:	f003 fca4 	bl	8004358 <__errno>
 8000a10:	4603      	mov	r3, r0
 8000a12:	220c      	movs	r2, #12
 8000a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a1a:	e009      	b.n	8000a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <_sbrk+0x64>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a22:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <_sbrk+0x64>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <_sbrk+0x64>)
 8000a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20018000 	.word	0x20018000
 8000a3c:	00000400 	.word	0x00000400
 8000a40:	20000080 	.word	0x20000080
 8000a44:	200002d8 	.word	0x200002d8

08000a48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <SystemInit+0x20>)
 8000a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a52:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <SystemInit+0x20>)
 8000a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a70:	f7ff ffea 	bl	8000a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a74:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a76:	490d      	ldr	r1, [pc, #52]	; (8000aac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a78:	4a0d      	ldr	r2, [pc, #52]	; (8000ab0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a7c:	e002      	b.n	8000a84 <LoopCopyDataInit>

08000a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a82:	3304      	adds	r3, #4

08000a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a88:	d3f9      	bcc.n	8000a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a8c:	4c0a      	ldr	r4, [pc, #40]	; (8000ab8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a90:	e001      	b.n	8000a96 <LoopFillZerobss>

08000a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a94:	3204      	adds	r2, #4

08000a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a98:	d3fb      	bcc.n	8000a92 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000a9a:	f003 fc63 	bl	8004364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a9e:	f7ff fd6d 	bl	800057c <main>
  bx  lr    
 8000aa2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aa4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aac:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ab0:	08004d3c 	.word	0x08004d3c
  ldr r2, =_sbss
 8000ab4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ab8:	200002d4 	.word	0x200002d4

08000abc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000abc:	e7fe      	b.n	8000abc <ADC_IRQHandler>
	...

08000ac0 <HAL_TIM_IC_CaptureCallback>:
/*Declaration of variables ********************************************************/
static uint32_t valor1, valor2, periodo; //valor1 =Tiempo subida, valor2 = tiempo bajada
static uint8_t v = 0; //flag: si el primer valor es capturado, el segundo, etc...
distance_t distancia;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) { //Rutina de servicio de interrupcion
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {       // que canal fue el que lo disparo
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	7f1b      	ldrb	r3, [r3, #28]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d14b      	bne.n	8000b68 <HAL_TIM_IC_CaptureCallback+0xa8>

		if (v == 0) {                                             //identificar la primera lectura
 8000ad0:	4b27      	ldr	r3, [pc, #156]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d11a      	bne.n	8000b0e <HAL_TIM_IC_CaptureCallback+0x4e>
			valor1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  //rutina que captura el primer tiempo de
 8000ad8:	2100      	movs	r1, #0
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f002 fcb0 	bl	8003440 <HAL_TIM_ReadCapturedValue>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	4a24      	ldr	r2, [pc, #144]	; (8000b74 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000ae4:	6013      	str	r3, [r2, #0]
			v = 1; //una vez identificado el momento de subida, ahora el siguiente tiempo que calcule es el
 8000ae6:	4b22      	ldr	r3, [pc, #136]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_FALLING); //cambiamos de polaridad
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	6a1a      	ldr	r2, [r3, #32]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f022 020a 	bic.w	r2, r2, #10
 8000afa:	621a      	str	r2, [r3, #32]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	6a1a      	ldr	r2, [r3, #32]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f042 0202 	orr.w	r2, r2, #2
 8000b0a:	621a      	str	r2, [r3, #32]
			}
			v = 0;  //volver cero para que vuelva a hacer otras lecturas
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING); // cambio de polaridad
		}
	}
}
 8000b0c:	e02c      	b.n	8000b68 <HAL_TIM_IC_CaptureCallback+0xa8>
		} else if (v == 1) {
 8000b0e:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d128      	bne.n	8000b68 <HAL_TIM_IC_CaptureCallback+0xa8>
			valor2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // calculo del momento de bajada
 8000b16:	2100      	movs	r1, #0
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f002 fc91 	bl	8003440 <HAL_TIM_ReadCapturedValue>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	4a15      	ldr	r2, [pc, #84]	; (8000b78 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000b22:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0); //una macro que reinicia el contador
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	625a      	str	r2, [r3, #36]	; 0x24
			if (valor2 > valor1) {
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d906      	bls.n	8000b46 <HAL_TIM_IC_CaptureCallback+0x86>
				periodo = valor2 - valor1; //un valor en cuestiones de microsegundos
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000b44:	6013      	str	r3, [r2, #0]
			v = 0;  //volver cero para que vuelva a hacer otras lecturas
 8000b46:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING); // cambio de polaridad
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	6a1a      	ldr	r2, [r3, #32]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f022 020a 	bic.w	r2, r2, #10
 8000b5a:	621a      	str	r2, [r3, #32]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	6a12      	ldr	r2, [r2, #32]
 8000b66:	621a      	str	r2, [r3, #32]
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200000d8 	.word	0x200000d8
 8000b74:	200000cc 	.word	0x200000cc
 8000b78:	200000d0 	.word	0x200000d0
 8000b7c:	200000d4 	.word	0x200000d4

08000b80 <API_HCSR04_Measure>:

/* Mide la distancia al objeto usando los parametros preconfigurados GPIO y TIM1 seleccionado***/
distance_t API_HCSR04_Measure(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
	/*** Comienzo de la rutina de medicion ***/
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8000b84:	2201      	movs	r2, #1
 8000b86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b8a:	480e      	ldr	r0, [pc, #56]	; (8000bc4 <API_HCSR04_Measure+0x44>)
 8000b8c:	f000 fed8 	bl	8001940 <HAL_GPIO_WritePin>
	HAL_Delay(10); //10 us de espera
 8000b90:	200a      	movs	r0, #10
 8000b92:	f000 fc1b 	bl	80013cc <HAL_Delay>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b9c:	4809      	ldr	r0, [pc, #36]	; (8000bc4 <API_HCSR04_Measure+0x44>)
 8000b9e:	f000 fecf 	bl	8001940 <HAL_GPIO_WritePin>

	/*** Iniciar Timer y medir ancgo de pulso ***/
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4808      	ldr	r0, [pc, #32]	; (8000bc8 <API_HCSR04_Measure+0x48>)
 8000ba6:	f002 f8dd 	bl	8002d64 <HAL_TIM_IC_Start_IT>

	distancia = periodo/58; //Distancia en cm
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <API_HCSR04_Measure+0x4c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <API_HCSR04_Measure+0x50>)
 8000bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb4:	095b      	lsrs	r3, r3, #5
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <API_HCSR04_Measure+0x54>)
 8000bba:	601a      	str	r2, [r3, #0]
	return distancia;
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <API_HCSR04_Measure+0x54>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40020000 	.word	0x40020000
 8000bc8:	20000084 	.word	0x20000084
 8000bcc:	200000d4 	.word	0x200000d4
 8000bd0:	8d3dcb09 	.word	0x8d3dcb09
 8000bd4:	200000dc 	.word	0x200000dc

08000bd8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b094      	sub	sp, #80	; 0x50
 8000bdc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000bde:	f107 0320 	add.w	r3, r7, #32
 8000be2:	2230      	movs	r2, #48	; 0x30
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f003 fbae 	bl	8004348 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	4b29      	ldr	r3, [pc, #164]	; (8000ca8 <SystemClock_Config+0xd0>)
 8000c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c04:	4a28      	ldr	r2, [pc, #160]	; (8000ca8 <SystemClock_Config+0xd0>)
 8000c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0c:	4b26      	ldr	r3, [pc, #152]	; (8000ca8 <SystemClock_Config+0xd0>)
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c18:	2300      	movs	r3, #0
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	4b23      	ldr	r3, [pc, #140]	; (8000cac <SystemClock_Config+0xd4>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c24:	4a21      	ldr	r2, [pc, #132]	; (8000cac <SystemClock_Config+0xd4>)
 8000c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c2a:	6013      	str	r3, [r2, #0]
 8000c2c:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <SystemClock_Config+0xd4>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c40:	2310      	movs	r3, #16
 8000c42:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c44:	2302      	movs	r3, #2
 8000c46:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000c4c:	2310      	movs	r3, #16
 8000c4e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000c50:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c54:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c56:	2304      	movs	r3, #4
 8000c58:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c5a:	2307      	movs	r3, #7
 8000c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000c5e:	f107 0320 	add.w	r3, r7, #32
 8000c62:	4618      	mov	r0, r3
 8000c64:	f001 fb3e 	bl	80022e4 <HAL_RCC_OscConfig>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <SystemClock_Config+0x9a>
		Error_Handler();
 8000c6e:	f000 f81f 	bl	8000cb0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000c72:	230f      	movs	r3, #15
 8000c74:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c76:	2302      	movs	r3, #2
 8000c78:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c82:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f001 fda0 	bl	80027d4 <HAL_RCC_ClockConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <SystemClock_Config+0xc6>
		Error_Handler();
 8000c9a:	f000 f809 	bl	8000cb0 <Error_Handler>
	}
}
 8000c9e:	bf00      	nop
 8000ca0:	3750      	adds	r7, #80	; 0x50
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40007000 	.word	0x40007000

08000cb0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb4:	b672      	cpsid	i
}
 8000cb6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000cb8:	e7fe      	b.n	8000cb8 <Error_Handler+0x8>
	...

08000cbc <API_distance>:
distance_t distance; //asignar Variable int devuelta por funcion medicion HCSR04
static char_t dist[6]; //para convertir valor entero "distancia" a una cadena

/*** Reel la distancia y devuelve su valor en formato cadena tipo char***/
distance_t API_distance(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	distance = API_HCSR04_Measure(); //Hace la medicion con el HCSR04 y guarda en "distance"
 8000cc0:	f7ff ff5e 	bl	8000b80 <API_HCSR04_Measure>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	4a03      	ldr	r2, [pc, #12]	; (8000cd4 <API_distance+0x18>)
 8000cc8:	6013      	str	r3, [r2, #0]
	return distance;
 8000cca:	4b02      	ldr	r3, [pc, #8]	; (8000cd4 <API_distance+0x18>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200000e0 	.word	0x200000e0

08000cd8 <API_Initial>:

/***Muestra en LCD mensaje de estado de Inicializacion de la App***/
void API_Initial(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	/*** Mostrar en lcd ***/
	lcd_clear();
 8000cdc:	f000 f9be 	bl	800105c <lcd_clear>
	lcd_put_cur(0, 0);
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f000 f9d1 	bl	800108a <lcd_put_cur>
	lcd_send_string(" Inicializando ");
 8000ce8:	4805      	ldr	r0, [pc, #20]	; (8000d00 <API_Initial+0x28>)
 8000cea:	f000 fa2a 	bl	8001142 <lcd_send_string>
	lcd_put_cur(1, 0);
 8000cee:	2100      	movs	r1, #0
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f000 f9ca 	bl	800108a <lcd_put_cur>
	lcd_send_string("Medidor Ultrason");
 8000cf6:	4803      	ldr	r0, [pc, #12]	; (8000d04 <API_Initial+0x2c>)
 8000cf8:	f000 fa23 	bl	8001142 <lcd_send_string>
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	08004c68 	.word	0x08004c68
 8000d04:	08004c78 	.word	0x08004c78

08000d08 <API_Read_Measuring>:

void API_Read_Measuring(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	/*** Mostrar en lcd ***/
	lcd_clear();
 8000d0c:	f000 f9a6 	bl	800105c <lcd_clear>
	lcd_put_cur(0, 0);
 8000d10:	2100      	movs	r1, #0
 8000d12:	2000      	movs	r0, #0
 8000d14:	f000 f9b9 	bl	800108a <lcd_put_cur>
	lcd_send_string("    HC-SR04     ");
 8000d18:	4805      	ldr	r0, [pc, #20]	; (8000d30 <API_Read_Measuring+0x28>)
 8000d1a:	f000 fa12 	bl	8001142 <lcd_send_string>
	lcd_put_cur(1, 0);
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2001      	movs	r0, #1
 8000d22:	f000 f9b2 	bl	800108a <lcd_put_cur>
	lcd_send_string("    Midiendo    ");
 8000d26:	4803      	ldr	r0, [pc, #12]	; (8000d34 <API_Read_Measuring+0x2c>)
 8000d28:	f000 fa0b 	bl	8001142 <lcd_send_string>
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	08004c8c 	.word	0x08004c8c
 8000d34:	08004ca0 	.word	0x08004ca0

08000d38 <API_Write_LCD16X2>:

void API_Write_LCD16X2(distance_t distance)
{	/* Convierte entero a cadena char para mostrar valor en LCD */
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	sprintf(dist, "%d", distance);
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	490f      	ldr	r1, [pc, #60]	; (8000d80 <API_Write_LCD16X2+0x48>)
 8000d44:	480f      	ldr	r0, [pc, #60]	; (8000d84 <API_Write_LCD16X2+0x4c>)
 8000d46:	f003 fadf 	bl	8004308 <siprintf>
	/*** Mostrar en lcd ***/
	lcd_clear();
 8000d4a:	f000 f987 	bl	800105c <lcd_clear>
	lcd_put_cur(0, 0);
 8000d4e:	2100      	movs	r1, #0
 8000d50:	2000      	movs	r0, #0
 8000d52:	f000 f99a 	bl	800108a <lcd_put_cur>
	lcd_send_string("    HC-SR04     ");
 8000d56:	480c      	ldr	r0, [pc, #48]	; (8000d88 <API_Write_LCD16X2+0x50>)
 8000d58:	f000 f9f3 	bl	8001142 <lcd_send_string>
	lcd_put_cur(1, 0);
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f000 f993 	bl	800108a <lcd_put_cur>
	lcd_send_string("Distancia: ");
 8000d64:	4809      	ldr	r0, [pc, #36]	; (8000d8c <API_Write_LCD16X2+0x54>)
 8000d66:	f000 f9ec 	bl	8001142 <lcd_send_string>
	lcd_send_string(dist);
 8000d6a:	4806      	ldr	r0, [pc, #24]	; (8000d84 <API_Write_LCD16X2+0x4c>)
 8000d6c:	f000 f9e9 	bl	8001142 <lcd_send_string>
	lcd_send_string("cm");
 8000d70:	4807      	ldr	r0, [pc, #28]	; (8000d90 <API_Write_LCD16X2+0x58>)
 8000d72:	f000 f9e6 	bl	8001142 <lcd_send_string>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	08004cb4 	.word	0x08004cb4
 8000d84:	200000e4 	.word	0x200000e4
 8000d88:	08004c8c 	.word	0x08004c8c
 8000d8c:	08004cb8 	.word	0x08004cb8
 8000d90:	08004cc4 	.word	0x08004cc4

08000d94 <delayInit>:

#include "main.h"
#include "API_Headers.h"

/* Inicializa la estructura de retardo no bloqueante */
void delayInit(delay_t *delay, tick_t duration) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
	if (delay == NULL || duration <= 0 ){
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d002      	beq.n	8000daa <delayInit+0x16>
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d101      	bne.n	8000dae <delayInit+0x1a>
		Error_Handler();
 8000daa:	f7ff ff81 	bl	8000cb0 <Error_Handler>
	}

	delay->duration = duration;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	683a      	ldr	r2, [r7, #0]
 8000db2:	605a      	str	r2, [r3, #4]
	delay->running = false;                                    //Inicializa el flag running en false
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	721a      	strb	r2, [r3, #8]
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <delayRead>:

/* Lee el retardo no bloqueante y devuelve true si ha finalizado */
bool_t delayRead(delay_t *delay) {
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b084      	sub	sp, #16
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
	if (!delay->running) {                                    // Si el retardo no se ha ejecutado, se inicia y se registra el tiempo de inicio
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	7a1b      	ldrb	r3, [r3, #8]
 8000dce:	f083 0301 	eor.w	r3, r3, #1
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d009      	beq.n	8000dec <delayRead+0x2a>
		delay->startTime = HAL_GetTick();                     // Toma una marca de tiempo
 8000dd8:	f000 faec 	bl	80013b4 <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	601a      	str	r2, [r3, #0]
		delay->running = true;                                // Cambia running a true
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2201      	movs	r2, #1
 8000de6:	721a      	strb	r2, [r3, #8]
		return false;
 8000de8:	2300      	movs	r3, #0
 8000dea:	e012      	b.n	8000e12 <delayRead+0x50>
	} else {                                                  // Si el retardo está en ejecución, se verifica si ha finalizado
		tick_t currentTime = HAL_GetTick();                   // Obtiene el tiempo actual
 8000dec:	f000 fae2 	bl	80013b4 <HAL_GetTick>
 8000df0:	60f8      	str	r0, [r7, #12]
		tick_t elapsedTime = currentTime - delay->startTime;  // Saber si el tiempo de retardo se cumplio
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	60bb      	str	r3, [r7, #8]

		if (elapsedTime >= delay->duration) {                 // Si ha pasado el tiempo establecido, se finaliza el retardo y devuelve true
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	68ba      	ldr	r2, [r7, #8]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d304      	bcc.n	8000e10 <delayRead+0x4e>
			delay->running = false;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	721a      	strb	r2, [r3, #8]
			return true;                                      // El retardo a terminado.
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e000      	b.n	8000e12 <delayRead+0x50>
		} else {                                              // Si el retardo aún no ha finalizado, devuelve false
			return false;
 8000e10:	2300      	movs	r3, #0
		}
	}
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	; 0x28
 8000e20:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	4b2e      	ldr	r3, [pc, #184]	; (8000ef0 <MX_GPIO_Init+0xd4>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a2d      	ldr	r2, [pc, #180]	; (8000ef0 <MX_GPIO_Init+0xd4>)
 8000e3c:	f043 0304 	orr.w	r3, r3, #4
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b2b      	ldr	r3, [pc, #172]	; (8000ef0 <MX_GPIO_Init+0xd4>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0304 	and.w	r3, r3, #4
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b27      	ldr	r3, [pc, #156]	; (8000ef0 <MX_GPIO_Init+0xd4>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a26      	ldr	r2, [pc, #152]	; (8000ef0 <MX_GPIO_Init+0xd4>)
 8000e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b24      	ldr	r3, [pc, #144]	; (8000ef0 <MX_GPIO_Init+0xd4>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	4b20      	ldr	r3, [pc, #128]	; (8000ef0 <MX_GPIO_Init+0xd4>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a1f      	ldr	r2, [pc, #124]	; (8000ef0 <MX_GPIO_Init+0xd4>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ef0 <MX_GPIO_Init+0xd4>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <MX_GPIO_Init+0xd4>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a18      	ldr	r2, [pc, #96]	; (8000ef0 <MX_GPIO_Init+0xd4>)
 8000e90:	f043 0302 	orr.w	r3, r3, #2
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <MX_GPIO_Init+0xd4>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD1_Pin|LD3_Pin|LD2_Pin | TRIG_Pin, GPIO_PIN_RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f240 1123 	movw	r1, #291	; 0x123
 8000ea8:	4812      	ldr	r0, [pc, #72]	; (8000ef4 <MX_GPIO_Init+0xd8>)
 8000eaa:	f000 fd49 	bl	8001940 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000eae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000eb4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000eb8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <MX_GPIO_Init+0xdc>)
 8000ec6:	f000 fbb7 	bl	8001638 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin TRIG_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin | TRIG_Pin;
 8000eca:	f240 1323 	movw	r3, #291	; 0x123
 8000ece:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <MX_GPIO_Init+0xd8>)
 8000ee4:	f000 fba8 	bl	8001638 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000ee8:	bf00      	nop
 8000eea:	3728      	adds	r7, #40	; 0x28
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	40020800 	.word	0x40020800

08000efc <writeLedOff_GPIO>:

void writeLedOff_GPIO(led_t LED)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, LED, GPIO_PIN_RESET);
 8000f06:	88fb      	ldrh	r3, [r7, #6]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4803      	ldr	r0, [pc, #12]	; (8000f1c <writeLedOff_GPIO+0x20>)
 8000f0e:	f000 fd17 	bl	8001940 <HAL_GPIO_WritePin>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40020000 	.word	0x40020000

08000f20 <toggleLed_GPIO>:

void toggleLed_GPIO(led_t LED)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(GPIOA, LED);
 8000f2a:	88fb      	ldrh	r3, [r7, #6]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4803      	ldr	r0, [pc, #12]	; (8000f3c <toggleLed_GPIO+0x1c>)
 8000f30:	f000 fd1f 	bl	8001972 <HAL_GPIO_TogglePin>
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40020000 	.word	0x40020000

08000f40 <MX_I2C1_Init>:
 */
#include "API_Headers.h"

extern I2C_HandleTypeDef hi2c1;

void MX_I2C1_Init(void) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <MX_I2C1_Init+0x50>)
 8000f46:	4a13      	ldr	r2, [pc, #76]	; (8000f94 <MX_I2C1_Init+0x54>)
 8000f48:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <MX_I2C1_Init+0x50>)
 8000f4c:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <MX_I2C1_Init+0x58>)
 8000f4e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <MX_I2C1_Init+0x50>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <MX_I2C1_Init+0x50>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <MX_I2C1_Init+0x50>)
 8000f5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f62:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f64:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <MX_I2C1_Init+0x50>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <MX_I2C1_Init+0x50>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f70:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <MX_I2C1_Init+0x50>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <MX_I2C1_Init+0x50>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000f7c:	4804      	ldr	r0, [pc, #16]	; (8000f90 <MX_I2C1_Init+0x50>)
 8000f7e:	f000 fd13 	bl	80019a8 <HAL_I2C_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000f88:	f7ff fe92 	bl	8000cb0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	200000ec 	.word	0x200000ec
 8000f94:	40005400 	.word	0x40005400
 8000f98:	000186a0 	.word	0x000186a0

08000f9c <lcd_send_cmd>:
 * 0100 1110 -> 0X4E Esto es para un driver PCF8574 */
/*NOTA si tenemos un driver PCF7584A, su direccion por defecto es 0x3F -> % 111 1111,
 * a la que si le agregamos un 0 en el LSB que corresponde a Write (W* = 0) tendremos
 * el valor % 1111 1110-> 0xFE */

void lcd_send_cmd(char cmd) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af02      	add	r7, sp, #8
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_1;

	uint8_t data_t[4];

	data_u = cmd & 0xf0;
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f023 030f 	bic.w	r3, r3, #15
 8000fac:	73fb      	strb	r3, [r7, #15]
	data_1 = (cmd << 4) & 0xf0;
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	011b      	lsls	r3, r3, #4
 8000fb2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C; //en=1, rs=0
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	f043 030c 	orr.w	r3, r3, #12
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08; //en=0, rs=0
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	f043 0308 	orr.w	r3, r3, #8
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_1 | 0x0C; //en=1, rs=0
 8000fc8:	7bbb      	ldrb	r3, [r7, #14]
 8000fca:	f043 030c 	orr.w	r3, r3, #12
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_1 | 0x08; //en=0, rs=0
 8000fd2:	7bbb      	ldrb	r3, [r7, #14]
 8000fd4:	f043 0308 	orr.w	r3, r3, #8
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 8000fdc:	f107 0208 	add.w	r2, r7, #8
 8000fe0:	2364      	movs	r3, #100	; 0x64
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	214e      	movs	r1, #78	; 0x4e
 8000fe8:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <lcd_send_cmd+0x5c>)
 8000fea:	f000 fe21 	bl	8001c30 <HAL_I2C_Master_Transmit>
			100);

}
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200000ec 	.word	0x200000ec

08000ffc <lcd_send_data>:

void lcd_send_data(char data) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af02      	add	r7, sp, #8
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]

	char data_u, data_1;

	uint8_t data_t[4];

	data_u = (data & 0xf0);
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	f023 030f 	bic.w	r3, r3, #15
 800100c:	73fb      	strb	r3, [r7, #15]
	data_1 = ((data<<4)&0xf0);
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	011b      	lsls	r3, r3, #4
 8001012:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D; //en=1, rs=0
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	f043 030d 	orr.w	r3, r3, #13
 800101a:	b2db      	uxtb	r3, r3
 800101c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09; //en=0, rs=0
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	f043 0309 	orr.w	r3, r3, #9
 8001024:	b2db      	uxtb	r3, r3
 8001026:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_1 | 0x0D; //en=1, rs=0
 8001028:	7bbb      	ldrb	r3, [r7, #14]
 800102a:	f043 030d 	orr.w	r3, r3, #13
 800102e:	b2db      	uxtb	r3, r3
 8001030:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_1 | 0x09; //en=0, rs=0
 8001032:	7bbb      	ldrb	r3, [r7, #14]
 8001034:	f043 0309 	orr.w	r3, r3, #9
 8001038:	b2db      	uxtb	r3, r3
 800103a:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4, 100);
 800103c:	f107 0208 	add.w	r2, r7, #8
 8001040:	2364      	movs	r3, #100	; 0x64
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2304      	movs	r3, #4
 8001046:	214e      	movs	r1, #78	; 0x4e
 8001048:	4803      	ldr	r0, [pc, #12]	; (8001058 <lcd_send_data+0x5c>)
 800104a:	f000 fdf1 	bl	8001c30 <HAL_I2C_Master_Transmit>
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200000ec 	.word	0x200000ec

0800105c <lcd_clear>:

void lcd_clear (void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8001062:	2080      	movs	r0, #128	; 0x80
 8001064:	f7ff ff9a 	bl	8000f9c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	e005      	b.n	800107a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800106e:	2020      	movs	r0, #32
 8001070:	f7ff ffc4 	bl	8000ffc <lcd_send_data>
	for (int i=0; i<70; i++)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3301      	adds	r3, #1
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b45      	cmp	r3, #69	; 0x45
 800107e:	ddf6      	ble.n	800106e <lcd_clear+0x12>
	}
}
 8001080:	bf00      	nop
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
 8001092:	6039      	str	r1, [r7, #0]
    switch (row)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <lcd_put_cur+0x18>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d005      	beq.n	80010ac <lcd_put_cur+0x22>
 80010a0:	e009      	b.n	80010b6 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a8:	603b      	str	r3, [r7, #0]
            break;
 80010aa:	e004      	b.n	80010b6 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80010b2:	603b      	str	r3, [r7, #0]
            break;
 80010b4:	bf00      	nop
    }

    lcd_send_cmd (col);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ff6e 	bl	8000f9c <lcd_send_cmd>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <lcd_init>:

void lcd_init(void) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0

	HAL_Delay(50); // wait for >40ms
 80010cc:	2032      	movs	r0, #50	; 0x32
 80010ce:	f000 f97d 	bl	80013cc <HAL_Delay>
	lcd_send_cmd(0x30);
 80010d2:	2030      	movs	r0, #48	; 0x30
 80010d4:	f7ff ff62 	bl	8000f9c <lcd_send_cmd>
	HAL_Delay(5); // wait for >4.1ms
 80010d8:	2005      	movs	r0, #5
 80010da:	f000 f977 	bl	80013cc <HAL_Delay>
	lcd_send_cmd(0x30);
 80010de:	2030      	movs	r0, #48	; 0x30
 80010e0:	f7ff ff5c 	bl	8000f9c <lcd_send_cmd>
	HAL_Delay(1); // wait for >100us
 80010e4:	2001      	movs	r0, #1
 80010e6:	f000 f971 	bl	80013cc <HAL_Delay>
	lcd_send_cmd(0x30);
 80010ea:	2030      	movs	r0, #48	; 0x30
 80010ec:	f7ff ff56 	bl	8000f9c <lcd_send_cmd>
	HAL_Delay(10);
 80010f0:	200a      	movs	r0, #10
 80010f2:	f000 f96b 	bl	80013cc <HAL_Delay>
	lcd_send_cmd(0x20); // 4 bit mode
 80010f6:	2020      	movs	r0, #32
 80010f8:	f7ff ff50 	bl	8000f9c <lcd_send_cmd>
	HAL_Delay(10);
 80010fc:	200a      	movs	r0, #10
 80010fe:	f000 f965 	bl	80013cc <HAL_Delay>

	//inicializacion del display
	lcd_send_cmd(0x28); //Function set -->DL=0 (4 bit mode), N=1(2 line display), F=0 (5x8 characters)
 8001102:	2028      	movs	r0, #40	; 0x28
 8001104:	f7ff ff4a 	bl	8000f9c <lcd_send_cmd>
	HAL_Delay(1);
 8001108:	2001      	movs	r0, #1
 800110a:	f000 f95f 	bl	80013cc <HAL_Delay>
	lcd_send_cmd(0x08); //Display on/off control --> D=0, C=0, B=0 ---> display off
 800110e:	2008      	movs	r0, #8
 8001110:	f7ff ff44 	bl	8000f9c <lcd_send_cmd>
	HAL_Delay(1);
 8001114:	2001      	movs	r0, #1
 8001116:	f000 f959 	bl	80013cc <HAL_Delay>
	lcd_send_cmd(0x01); //clear display
 800111a:	2001      	movs	r0, #1
 800111c:	f7ff ff3e 	bl	8000f9c <lcd_send_cmd>
	HAL_Delay(1);
 8001120:	2001      	movs	r0, #1
 8001122:	f000 f953 	bl	80013cc <HAL_Delay>
	HAL_Delay(1);
 8001126:	2001      	movs	r0, #1
 8001128:	f000 f950 	bl	80013cc <HAL_Delay>
	lcd_send_cmd(0x06); //entry mode set --> I/D = 1 (increment cursor) & S=0(noshift)
 800112c:	2006      	movs	r0, #6
 800112e:	f7ff ff35 	bl	8000f9c <lcd_send_cmd>
	HAL_Delay(1);
 8001132:	2001      	movs	r0, #1
 8001134:	f000 f94a 	bl	80013cc <HAL_Delay>
	lcd_send_cmd(0x0C); //Display on/off control --> D=1, C=0, B=0. (Cursor andblink, last two bits)
 8001138:	200c      	movs	r0, #12
 800113a:	f7ff ff2f 	bl	8000f9c <lcd_send_cmd>
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}

08001142 <lcd_send_string>:

void lcd_send_string(char *str) {
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data(*str++);
 800114a:	e006      	b.n	800115a <lcd_send_string+0x18>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	1c5a      	adds	r2, r3, #1
 8001150:	607a      	str	r2, [r7, #4]
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff51 	bl	8000ffc <lcd_send_data>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1f4      	bne.n	800114c <lcd_send_string+0xa>
}
 8001162:	bf00      	nop
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
void MX_TIM3_Init(void) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001172:	f107 0318 	add.w	r3, r7, #24
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 800118a:	463b      	mov	r3, r7
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001196:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <MX_TIM3_Init+0xd8>)
 8001198:	4a2b      	ldr	r2, [pc, #172]	; (8001248 <MX_TIM3_Init+0xdc>)
 800119a:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 83;
 800119c:	4b29      	ldr	r3, [pc, #164]	; (8001244 <MX_TIM3_Init+0xd8>)
 800119e:	2253      	movs	r2, #83	; 0x53
 80011a0:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a2:	4b28      	ldr	r3, [pc, #160]	; (8001244 <MX_TIM3_Init+0xd8>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80011a8:	4b26      	ldr	r3, [pc, #152]	; (8001244 <MX_TIM3_Init+0xd8>)
 80011aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ae:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b0:	4b24      	ldr	r3, [pc, #144]	; (8001244 <MX_TIM3_Init+0xd8>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b6:	4b23      	ldr	r3, [pc, #140]	; (8001244 <MX_TIM3_Init+0xd8>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80011bc:	4821      	ldr	r0, [pc, #132]	; (8001244 <MX_TIM3_Init+0xd8>)
 80011be:	f001 fd29 	bl	8002c14 <HAL_TIM_Base_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM3_Init+0x60>
		Error_Handler();
 80011c8:	f7ff fd72 	bl	8000cb0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d0:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80011d2:	f107 0318 	add.w	r3, r7, #24
 80011d6:	4619      	mov	r1, r3
 80011d8:	481a      	ldr	r0, [pc, #104]	; (8001244 <MX_TIM3_Init+0xd8>)
 80011da:	f002 f869 	bl	80032b0 <HAL_TIM_ConfigClockSource>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM3_Init+0x7c>
		Error_Handler();
 80011e4:	f7ff fd64 	bl	8000cb0 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK) {
 80011e8:	4816      	ldr	r0, [pc, #88]	; (8001244 <MX_TIM3_Init+0xd8>)
 80011ea:	f001 fd62 	bl	8002cb2 <HAL_TIM_IC_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM3_Init+0x8c>
		Error_Handler();
 80011f4:	f7ff fd5c 	bl	8000cb0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f8:	2300      	movs	r3, #0
 80011fa:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)!= HAL_OK) {
 8001200:	f107 0310 	add.w	r3, r7, #16
 8001204:	4619      	mov	r1, r3
 8001206:	480f      	ldr	r0, [pc, #60]	; (8001244 <MX_TIM3_Init+0xd8>)
 8001208:	f002 fbf0 	bl	80039ec <HAL_TIMEx_MasterConfigSynchronization>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM3_Init+0xaa>
		Error_Handler();
 8001212:	f7ff fd4d 	bl	8000cb0 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001216:	2300      	movs	r3, #0
 8001218:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800121a:	2301      	movs	r3, #1
 800121c:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 4;
 8001222:	2304      	movs	r3, #4
 8001224:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001226:	463b      	mov	r3, r7
 8001228:	2200      	movs	r2, #0
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_TIM3_Init+0xd8>)
 800122e:	f001 ffa3 	bl	8003178 <HAL_TIM_IC_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM3_Init+0xd0>
		Error_Handler();
 8001238:	f7ff fd3a 	bl	8000cb0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	3728      	adds	r7, #40	; 0x28
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000084 	.word	0x20000084
 8001248:	40000400 	.word	0x40000400

0800124c <API_Write_UART>:
UART_HandleTypeDef huart2;

/*** Function definition **********************************************************/
/*** imprimir el valor en el puerto serial usart3 ***/
void API_Write_UART(distance_t distancia)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08c      	sub	sp, #48	; 0x30
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	char dato[40] = "";
 8001254:	2300      	movs	r3, #0
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	2224      	movs	r2, #36	; 0x24
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f003 f871 	bl	8004348 <memset>

	sprintf(dato, "Distancia = %d cm \r\n", distancia);
 8001266:	f107 0308 	add.w	r3, r7, #8
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	4907      	ldr	r1, [pc, #28]	; (800128c <API_Write_UART+0x40>)
 800126e:	4618      	mov	r0, r3
 8001270:	f003 f84a 	bl	8004308 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)dato, sizeof(dato), 1000);
 8001274:	f107 0108 	add.w	r1, r7, #8
 8001278:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127c:	2228      	movs	r2, #40	; 0x28
 800127e:	4804      	ldr	r0, [pc, #16]	; (8001290 <API_Write_UART+0x44>)
 8001280:	f002 fc86 	bl	8003b90 <HAL_UART_Transmit>
}
 8001284:	bf00      	nop
 8001286:	3730      	adds	r7, #48	; 0x30
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	08004cc8 	.word	0x08004cc8
 8001290:	20000140 	.word	0x20000140

08001294 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
void MX_USART2_UART_Init(void) {
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 800129a:	4a12      	ldr	r2, [pc, #72]	; (80012e4 <MX_USART2_UART_Init+0x50>)
 800129c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 80012a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012a4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 80012ba:	220c      	movs	r2, #12
 80012bc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 80012cc:	f002 fc10 	bl	8003af0 <HAL_UART_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80012d6:	f7ff fceb 	bl	8000cb0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000140 	.word	0x20000140
 80012e4:	40004400 	.word	0x40004400

080012e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012ec:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <HAL_Init+0x40>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0d      	ldr	r2, [pc, #52]	; (8001328 <HAL_Init+0x40>)
 80012f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012f8:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <HAL_Init+0x40>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <HAL_Init+0x40>)
 80012fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001302:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <HAL_Init+0x40>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a07      	ldr	r2, [pc, #28]	; (8001328 <HAL_Init+0x40>)
 800130a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800130e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001310:	2003      	movs	r0, #3
 8001312:	f000 f94f 	bl	80015b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001316:	2000      	movs	r0, #0
 8001318:	f000 f808 	bl	800132c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800131c:	f7ff fa22 	bl	8000764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40023c00 	.word	0x40023c00

0800132c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_InitTick+0x54>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_InitTick+0x58>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001342:	fbb3 f3f1 	udiv	r3, r3, r1
 8001346:	fbb2 f3f3 	udiv	r3, r2, r3
 800134a:	4618      	mov	r0, r3
 800134c:	f000 f967 	bl	800161e <HAL_SYSTICK_Config>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e00e      	b.n	8001378 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2b0f      	cmp	r3, #15
 800135e:	d80a      	bhi.n	8001376 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001360:	2200      	movs	r2, #0
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001368:	f000 f92f 	bl	80015ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800136c:	4a06      	ldr	r2, [pc, #24]	; (8001388 <HAL_InitTick+0x5c>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
 8001374:	e000      	b.n	8001378 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
}
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000000 	.word	0x20000000
 8001384:	20000008 	.word	0x20000008
 8001388:	20000004 	.word	0x20000004

0800138c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_IncTick+0x20>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_IncTick+0x24>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4413      	add	r3, r2
 800139c:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <HAL_IncTick+0x24>)
 800139e:	6013      	str	r3, [r2, #0]
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000008 	.word	0x20000008
 80013b0:	20000188 	.word	0x20000188

080013b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return uwTick;
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <HAL_GetTick+0x14>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000188 	.word	0x20000188

080013cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d4:	f7ff ffee 	bl	80013b4 <HAL_GetTick>
 80013d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013e4:	d005      	beq.n	80013f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013e6:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <HAL_Delay+0x44>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4413      	add	r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013f2:	bf00      	nop
 80013f4:	f7ff ffde 	bl	80013b4 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	429a      	cmp	r2, r3
 8001402:	d8f7      	bhi.n	80013f4 <HAL_Delay+0x28>
  {
  }
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000008 	.word	0x20000008

08001414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001430:	4013      	ands	r3, r2
 8001432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800143c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001446:	4a04      	ldr	r2, [pc, #16]	; (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	60d3      	str	r3, [r2, #12]
}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <__NVIC_GetPriorityGrouping+0x18>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	0a1b      	lsrs	r3, r3, #8
 8001466:	f003 0307 	and.w	r3, r3, #7
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	2b00      	cmp	r3, #0
 8001488:	db0b      	blt.n	80014a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	f003 021f 	and.w	r2, r3, #31
 8001490:	4907      	ldr	r1, [pc, #28]	; (80014b0 <__NVIC_EnableIRQ+0x38>)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	095b      	lsrs	r3, r3, #5
 8001498:	2001      	movs	r0, #1
 800149a:	fa00 f202 	lsl.w	r2, r0, r2
 800149e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000e100 	.word	0xe000e100

080014b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	6039      	str	r1, [r7, #0]
 80014be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	db0a      	blt.n	80014de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	490c      	ldr	r1, [pc, #48]	; (8001500 <__NVIC_SetPriority+0x4c>)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	0112      	lsls	r2, r2, #4
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	440b      	add	r3, r1
 80014d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014dc:	e00a      	b.n	80014f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4908      	ldr	r1, [pc, #32]	; (8001504 <__NVIC_SetPriority+0x50>)
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	3b04      	subs	r3, #4
 80014ec:	0112      	lsls	r2, r2, #4
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	440b      	add	r3, r1
 80014f2:	761a      	strb	r2, [r3, #24]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000e100 	.word	0xe000e100
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001508:	b480      	push	{r7}
 800150a:	b089      	sub	sp, #36	; 0x24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f1c3 0307 	rsb	r3, r3, #7
 8001522:	2b04      	cmp	r3, #4
 8001524:	bf28      	it	cs
 8001526:	2304      	movcs	r3, #4
 8001528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3304      	adds	r3, #4
 800152e:	2b06      	cmp	r3, #6
 8001530:	d902      	bls.n	8001538 <NVIC_EncodePriority+0x30>
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3b03      	subs	r3, #3
 8001536:	e000      	b.n	800153a <NVIC_EncodePriority+0x32>
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43da      	mvns	r2, r3
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	401a      	ands	r2, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001550:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	fa01 f303 	lsl.w	r3, r1, r3
 800155a:	43d9      	mvns	r1, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	4313      	orrs	r3, r2
         );
}
 8001562:	4618      	mov	r0, r3
 8001564:	3724      	adds	r7, #36	; 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001580:	d301      	bcc.n	8001586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001582:	2301      	movs	r3, #1
 8001584:	e00f      	b.n	80015a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <SysTick_Config+0x40>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800158e:	210f      	movs	r1, #15
 8001590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001594:	f7ff ff8e 	bl	80014b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <SysTick_Config+0x40>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <SysTick_Config+0x40>)
 80015a0:	2207      	movs	r2, #7
 80015a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	e000e010 	.word	0xe000e010

080015b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ff29 	bl	8001414 <__NVIC_SetPriorityGrouping>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b086      	sub	sp, #24
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
 80015d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015dc:	f7ff ff3e 	bl	800145c <__NVIC_GetPriorityGrouping>
 80015e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	6978      	ldr	r0, [r7, #20]
 80015e8:	f7ff ff8e 	bl	8001508 <NVIC_EncodePriority>
 80015ec:	4602      	mov	r2, r0
 80015ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff5d 	bl	80014b4 <__NVIC_SetPriority>
}
 80015fa:	bf00      	nop
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800160c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff31 	bl	8001478 <__NVIC_EnableIRQ>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ffa2 	bl	8001570 <SysTick_Config>
 800162c:	4603      	mov	r3, r0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001638:	b480      	push	{r7}
 800163a:	b089      	sub	sp, #36	; 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800164a:	2300      	movs	r3, #0
 800164c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
 8001652:	e159      	b.n	8001908 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001654:	2201      	movs	r2, #1
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	4013      	ands	r3, r2
 8001666:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	429a      	cmp	r2, r3
 800166e:	f040 8148 	bne.w	8001902 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	2b01      	cmp	r3, #1
 800167c:	d005      	beq.n	800168a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001686:	2b02      	cmp	r3, #2
 8001688:	d130      	bne.n	80016ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	2203      	movs	r2, #3
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	68da      	ldr	r2, [r3, #12]
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016c0:	2201      	movs	r2, #1
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	091b      	lsrs	r3, r3, #4
 80016d6:	f003 0201 	and.w	r2, r3, #1
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	2b03      	cmp	r3, #3
 80016f6:	d017      	beq.n	8001728 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	2203      	movs	r2, #3
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d123      	bne.n	800177c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	08da      	lsrs	r2, r3, #3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3208      	adds	r2, #8
 800173c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001740:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	220f      	movs	r2, #15
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	691a      	ldr	r2, [r3, #16]
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	08da      	lsrs	r2, r3, #3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3208      	adds	r2, #8
 8001776:	69b9      	ldr	r1, [r7, #24]
 8001778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	2203      	movs	r2, #3
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 0203 	and.w	r2, r3, #3
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 80a2 	beq.w	8001902 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	4b57      	ldr	r3, [pc, #348]	; (8001920 <HAL_GPIO_Init+0x2e8>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	4a56      	ldr	r2, [pc, #344]	; (8001920 <HAL_GPIO_Init+0x2e8>)
 80017c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017cc:	6453      	str	r3, [r2, #68]	; 0x44
 80017ce:	4b54      	ldr	r3, [pc, #336]	; (8001920 <HAL_GPIO_Init+0x2e8>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017da:	4a52      	ldr	r2, [pc, #328]	; (8001924 <HAL_GPIO_Init+0x2ec>)
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	089b      	lsrs	r3, r3, #2
 80017e0:	3302      	adds	r3, #2
 80017e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f003 0303 	and.w	r3, r3, #3
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	220f      	movs	r2, #15
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43db      	mvns	r3, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4013      	ands	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a49      	ldr	r2, [pc, #292]	; (8001928 <HAL_GPIO_Init+0x2f0>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d019      	beq.n	800183a <HAL_GPIO_Init+0x202>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a48      	ldr	r2, [pc, #288]	; (800192c <HAL_GPIO_Init+0x2f4>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d013      	beq.n	8001836 <HAL_GPIO_Init+0x1fe>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a47      	ldr	r2, [pc, #284]	; (8001930 <HAL_GPIO_Init+0x2f8>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d00d      	beq.n	8001832 <HAL_GPIO_Init+0x1fa>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a46      	ldr	r2, [pc, #280]	; (8001934 <HAL_GPIO_Init+0x2fc>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d007      	beq.n	800182e <HAL_GPIO_Init+0x1f6>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a45      	ldr	r2, [pc, #276]	; (8001938 <HAL_GPIO_Init+0x300>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d101      	bne.n	800182a <HAL_GPIO_Init+0x1f2>
 8001826:	2304      	movs	r3, #4
 8001828:	e008      	b.n	800183c <HAL_GPIO_Init+0x204>
 800182a:	2307      	movs	r3, #7
 800182c:	e006      	b.n	800183c <HAL_GPIO_Init+0x204>
 800182e:	2303      	movs	r3, #3
 8001830:	e004      	b.n	800183c <HAL_GPIO_Init+0x204>
 8001832:	2302      	movs	r3, #2
 8001834:	e002      	b.n	800183c <HAL_GPIO_Init+0x204>
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <HAL_GPIO_Init+0x204>
 800183a:	2300      	movs	r3, #0
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	f002 0203 	and.w	r2, r2, #3
 8001842:	0092      	lsls	r2, r2, #2
 8001844:	4093      	lsls	r3, r2
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800184c:	4935      	ldr	r1, [pc, #212]	; (8001924 <HAL_GPIO_Init+0x2ec>)
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	089b      	lsrs	r3, r3, #2
 8001852:	3302      	adds	r3, #2
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800185a:	4b38      	ldr	r3, [pc, #224]	; (800193c <HAL_GPIO_Init+0x304>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	43db      	mvns	r3, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4013      	ands	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800187e:	4a2f      	ldr	r2, [pc, #188]	; (800193c <HAL_GPIO_Init+0x304>)
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001884:	4b2d      	ldr	r3, [pc, #180]	; (800193c <HAL_GPIO_Init+0x304>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018a8:	4a24      	ldr	r2, [pc, #144]	; (800193c <HAL_GPIO_Init+0x304>)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018ae:	4b23      	ldr	r3, [pc, #140]	; (800193c <HAL_GPIO_Init+0x304>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4013      	ands	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018d2:	4a1a      	ldr	r2, [pc, #104]	; (800193c <HAL_GPIO_Init+0x304>)
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018d8:	4b18      	ldr	r3, [pc, #96]	; (800193c <HAL_GPIO_Init+0x304>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4013      	ands	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018fc:	4a0f      	ldr	r2, [pc, #60]	; (800193c <HAL_GPIO_Init+0x304>)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3301      	adds	r3, #1
 8001906:	61fb      	str	r3, [r7, #28]
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	2b0f      	cmp	r3, #15
 800190c:	f67f aea2 	bls.w	8001654 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001910:	bf00      	nop
 8001912:	bf00      	nop
 8001914:	3724      	adds	r7, #36	; 0x24
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800
 8001924:	40013800 	.word	0x40013800
 8001928:	40020000 	.word	0x40020000
 800192c:	40020400 	.word	0x40020400
 8001930:	40020800 	.word	0x40020800
 8001934:	40020c00 	.word	0x40020c00
 8001938:	40021000 	.word	0x40021000
 800193c:	40013c00 	.word	0x40013c00

08001940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	807b      	strh	r3, [r7, #2]
 800194c:	4613      	mov	r3, r2
 800194e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001950:	787b      	ldrb	r3, [r7, #1]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001956:	887a      	ldrh	r2, [r7, #2]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800195c:	e003      	b.n	8001966 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800195e:	887b      	ldrh	r3, [r7, #2]
 8001960:	041a      	lsls	r2, r3, #16
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	619a      	str	r2, [r3, #24]
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001972:	b480      	push	{r7}
 8001974:	b085      	sub	sp, #20
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	460b      	mov	r3, r1
 800197c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001984:	887a      	ldrh	r2, [r7, #2]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	4013      	ands	r3, r2
 800198a:	041a      	lsls	r2, r3, #16
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	43d9      	mvns	r1, r3
 8001990:	887b      	ldrh	r3, [r7, #2]
 8001992:	400b      	ands	r3, r1
 8001994:	431a      	orrs	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	619a      	str	r2, [r3, #24]
}
 800199a:	bf00      	nop
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
	...

080019a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e12b      	b.n	8001c12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d106      	bne.n	80019d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7fe fef0 	bl	80007b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2224      	movs	r2, #36	; 0x24
 80019d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0201 	bic.w	r2, r2, #1
 80019ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a0c:	f001 f8da 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 8001a10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	4a81      	ldr	r2, [pc, #516]	; (8001c1c <HAL_I2C_Init+0x274>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d807      	bhi.n	8001a2c <HAL_I2C_Init+0x84>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4a80      	ldr	r2, [pc, #512]	; (8001c20 <HAL_I2C_Init+0x278>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	bf94      	ite	ls
 8001a24:	2301      	movls	r3, #1
 8001a26:	2300      	movhi	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	e006      	b.n	8001a3a <HAL_I2C_Init+0x92>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4a7d      	ldr	r2, [pc, #500]	; (8001c24 <HAL_I2C_Init+0x27c>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	bf94      	ite	ls
 8001a34:	2301      	movls	r3, #1
 8001a36:	2300      	movhi	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e0e7      	b.n	8001c12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4a78      	ldr	r2, [pc, #480]	; (8001c28 <HAL_I2C_Init+0x280>)
 8001a46:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4a:	0c9b      	lsrs	r3, r3, #18
 8001a4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	4a6a      	ldr	r2, [pc, #424]	; (8001c1c <HAL_I2C_Init+0x274>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d802      	bhi.n	8001a7c <HAL_I2C_Init+0xd4>
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	e009      	b.n	8001a90 <HAL_I2C_Init+0xe8>
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a82:	fb02 f303 	mul.w	r3, r2, r3
 8001a86:	4a69      	ldr	r2, [pc, #420]	; (8001c2c <HAL_I2C_Init+0x284>)
 8001a88:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8c:	099b      	lsrs	r3, r3, #6
 8001a8e:	3301      	adds	r3, #1
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6812      	ldr	r2, [r2, #0]
 8001a94:	430b      	orrs	r3, r1
 8001a96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001aa2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	495c      	ldr	r1, [pc, #368]	; (8001c1c <HAL_I2C_Init+0x274>)
 8001aac:	428b      	cmp	r3, r1
 8001aae:	d819      	bhi.n	8001ae4 <HAL_I2C_Init+0x13c>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	1e59      	subs	r1, r3, #1
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	fbb1 f3f3 	udiv	r3, r1, r3
 8001abe:	1c59      	adds	r1, r3, #1
 8001ac0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ac4:	400b      	ands	r3, r1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00a      	beq.n	8001ae0 <HAL_I2C_Init+0x138>
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	1e59      	subs	r1, r3, #1
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ad8:	3301      	adds	r3, #1
 8001ada:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ade:	e051      	b.n	8001b84 <HAL_I2C_Init+0x1dc>
 8001ae0:	2304      	movs	r3, #4
 8001ae2:	e04f      	b.n	8001b84 <HAL_I2C_Init+0x1dc>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d111      	bne.n	8001b10 <HAL_I2C_Init+0x168>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	1e58      	subs	r0, r3, #1
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6859      	ldr	r1, [r3, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	440b      	add	r3, r1
 8001afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001afe:	3301      	adds	r3, #1
 8001b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	bf0c      	ite	eq
 8001b08:	2301      	moveq	r3, #1
 8001b0a:	2300      	movne	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	e012      	b.n	8001b36 <HAL_I2C_Init+0x18e>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	1e58      	subs	r0, r3, #1
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6859      	ldr	r1, [r3, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	0099      	lsls	r1, r3, #2
 8001b20:	440b      	add	r3, r1
 8001b22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b26:	3301      	adds	r3, #1
 8001b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	bf0c      	ite	eq
 8001b30:	2301      	moveq	r3, #1
 8001b32:	2300      	movne	r3, #0
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <HAL_I2C_Init+0x196>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e022      	b.n	8001b84 <HAL_I2C_Init+0x1dc>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10e      	bne.n	8001b64 <HAL_I2C_Init+0x1bc>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	1e58      	subs	r0, r3, #1
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6859      	ldr	r1, [r3, #4]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	440b      	add	r3, r1
 8001b54:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b58:	3301      	adds	r3, #1
 8001b5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b62:	e00f      	b.n	8001b84 <HAL_I2C_Init+0x1dc>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	1e58      	subs	r0, r3, #1
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6859      	ldr	r1, [r3, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	0099      	lsls	r1, r3, #2
 8001b74:	440b      	add	r3, r1
 8001b76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	6809      	ldr	r1, [r1, #0]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69da      	ldr	r2, [r3, #28]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001bb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6911      	ldr	r1, [r2, #16]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	68d2      	ldr	r2, [r2, #12]
 8001bbe:	4311      	orrs	r1, r2
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6812      	ldr	r2, [r2, #0]
 8001bc4:	430b      	orrs	r3, r1
 8001bc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	695a      	ldr	r2, [r3, #20]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0201 	orr.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2220      	movs	r2, #32
 8001bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	000186a0 	.word	0x000186a0
 8001c20:	001e847f 	.word	0x001e847f
 8001c24:	003d08ff 	.word	0x003d08ff
 8001c28:	431bde83 	.word	0x431bde83
 8001c2c:	10624dd3 	.word	0x10624dd3

08001c30 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b088      	sub	sp, #32
 8001c34:	af02      	add	r7, sp, #8
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	607a      	str	r2, [r7, #4]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	817b      	strh	r3, [r7, #10]
 8001c40:	4613      	mov	r3, r2
 8001c42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c44:	f7ff fbb6 	bl	80013b4 <HAL_GetTick>
 8001c48:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b20      	cmp	r3, #32
 8001c54:	f040 80e0 	bne.w	8001e18 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	2319      	movs	r3, #25
 8001c5e:	2201      	movs	r2, #1
 8001c60:	4970      	ldr	r1, [pc, #448]	; (8001e24 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 f964 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e0d3      	b.n	8001e1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d101      	bne.n	8001c80 <HAL_I2C_Master_Transmit+0x50>
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	e0cc      	b.n	8001e1a <HAL_I2C_Master_Transmit+0x1ea>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d007      	beq.n	8001ca6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f042 0201 	orr.w	r2, r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cb4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2221      	movs	r2, #33	; 0x21
 8001cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2210      	movs	r2, #16
 8001cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	893a      	ldrh	r2, [r7, #8]
 8001cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4a50      	ldr	r2, [pc, #320]	; (8001e28 <HAL_I2C_Master_Transmit+0x1f8>)
 8001ce6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ce8:	8979      	ldrh	r1, [r7, #10]
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	6a3a      	ldr	r2, [r7, #32]
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f000 f89c 	bl	8001e2c <I2C_MasterRequestWrite>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e08d      	b.n	8001e1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d14:	e066      	b.n	8001de4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	6a39      	ldr	r1, [r7, #32]
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f000 fa22 	bl	8002164 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00d      	beq.n	8001d42 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d107      	bne.n	8001d3e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e06b      	b.n	8001e1a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	781a      	ldrb	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	1c5a      	adds	r2, r3, #1
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b04      	cmp	r3, #4
 8001d7e:	d11b      	bne.n	8001db8 <HAL_I2C_Master_Transmit+0x188>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d017      	beq.n	8001db8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	781a      	ldrb	r2, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	1c5a      	adds	r2, r3, #1
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	3b01      	subs	r3, #1
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db0:	3b01      	subs	r3, #1
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	6a39      	ldr	r1, [r7, #32]
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f000 fa19 	bl	80021f4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00d      	beq.n	8001de4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d107      	bne.n	8001de0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dde:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e01a      	b.n	8001e1a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d194      	bne.n	8001d16 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	e000      	b.n	8001e1a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e18:	2302      	movs	r3, #2
  }
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	00100002 	.word	0x00100002
 8001e28:	ffff0000 	.word	0xffff0000

08001e2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af02      	add	r7, sp, #8
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	607a      	str	r2, [r7, #4]
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d006      	beq.n	8001e56 <I2C_MasterRequestWrite+0x2a>
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d003      	beq.n	8001e56 <I2C_MasterRequestWrite+0x2a>
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e54:	d108      	bne.n	8001e68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	e00b      	b.n	8001e80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6c:	2b12      	cmp	r3, #18
 8001e6e:	d107      	bne.n	8001e80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 f84f 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00d      	beq.n	8001eb4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ea6:	d103      	bne.n	8001eb0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e035      	b.n	8001f20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ebc:	d108      	bne.n	8001ed0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ebe:	897b      	ldrh	r3, [r7, #10]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ecc:	611a      	str	r2, [r3, #16]
 8001ece:	e01b      	b.n	8001f08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ed0:	897b      	ldrh	r3, [r7, #10]
 8001ed2:	11db      	asrs	r3, r3, #7
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	f003 0306 	and.w	r3, r3, #6
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	f063 030f 	orn	r3, r3, #15
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	490e      	ldr	r1, [pc, #56]	; (8001f28 <I2C_MasterRequestWrite+0xfc>)
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f000 f898 	bl	8002024 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e010      	b.n	8001f20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001efe:	897b      	ldrh	r3, [r7, #10]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	4907      	ldr	r1, [pc, #28]	; (8001f2c <I2C_MasterRequestWrite+0x100>)
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 f888 	bl	8002024 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	00010008 	.word	0x00010008
 8001f2c:	00010002 	.word	0x00010002

08001f30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f40:	e048      	b.n	8001fd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f48:	d044      	beq.n	8001fd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f4a:	f7ff fa33 	bl	80013b4 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d302      	bcc.n	8001f60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d139      	bne.n	8001fd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	0c1b      	lsrs	r3, r3, #16
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d10d      	bne.n	8001f86 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	43da      	mvns	r2, r3
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	4013      	ands	r3, r2
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	bf0c      	ite	eq
 8001f7c:	2301      	moveq	r3, #1
 8001f7e:	2300      	movne	r3, #0
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	461a      	mov	r2, r3
 8001f84:	e00c      	b.n	8001fa0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	43da      	mvns	r2, r3
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	4013      	ands	r3, r2
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	bf0c      	ite	eq
 8001f98:	2301      	moveq	r3, #1
 8001f9a:	2300      	movne	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d116      	bne.n	8001fd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	f043 0220 	orr.w	r2, r3, #32
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e023      	b.n	800201c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	0c1b      	lsrs	r3, r3, #16
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d10d      	bne.n	8001ffa <I2C_WaitOnFlagUntilTimeout+0xca>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	43da      	mvns	r2, r3
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	bf0c      	ite	eq
 8001ff0:	2301      	moveq	r3, #1
 8001ff2:	2300      	movne	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	e00c      	b.n	8002014 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	43da      	mvns	r2, r3
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	4013      	ands	r3, r2
 8002006:	b29b      	uxth	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	bf0c      	ite	eq
 800200c:	2301      	moveq	r3, #1
 800200e:	2300      	movne	r3, #0
 8002010:	b2db      	uxtb	r3, r3
 8002012:	461a      	mov	r2, r3
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	429a      	cmp	r2, r3
 8002018:	d093      	beq.n	8001f42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
 8002030:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002032:	e071      	b.n	8002118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800203e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002042:	d123      	bne.n	800208c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002052:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800205c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2220      	movs	r2, #32
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	f043 0204 	orr.w	r2, r3, #4
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e067      	b.n	800215c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002092:	d041      	beq.n	8002118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002094:	f7ff f98e 	bl	80013b4 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d302      	bcc.n	80020aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d136      	bne.n	8002118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	0c1b      	lsrs	r3, r3, #16
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d10c      	bne.n	80020ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	43da      	mvns	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	4013      	ands	r3, r2
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	bf14      	ite	ne
 80020c6:	2301      	movne	r3, #1
 80020c8:	2300      	moveq	r3, #0
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	e00b      	b.n	80020e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	43da      	mvns	r2, r3
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	4013      	ands	r3, r2
 80020da:	b29b      	uxth	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	bf14      	ite	ne
 80020e0:	2301      	movne	r3, #1
 80020e2:	2300      	moveq	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d016      	beq.n	8002118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2220      	movs	r2, #32
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	f043 0220 	orr.w	r2, r3, #32
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e021      	b.n	800215c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	0c1b      	lsrs	r3, r3, #16
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b01      	cmp	r3, #1
 8002120:	d10c      	bne.n	800213c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	43da      	mvns	r2, r3
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	4013      	ands	r3, r2
 800212e:	b29b      	uxth	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	bf14      	ite	ne
 8002134:	2301      	movne	r3, #1
 8002136:	2300      	moveq	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	e00b      	b.n	8002154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	43da      	mvns	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	4013      	ands	r3, r2
 8002148:	b29b      	uxth	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	bf14      	ite	ne
 800214e:	2301      	movne	r3, #1
 8002150:	2300      	moveq	r3, #0
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	f47f af6d 	bne.w	8002034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002170:	e034      	b.n	80021dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f000 f886 	bl	8002284 <I2C_IsAcknowledgeFailed>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e034      	b.n	80021ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002188:	d028      	beq.n	80021dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800218a:	f7ff f913 	bl	80013b4 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	429a      	cmp	r2, r3
 8002198:	d302      	bcc.n	80021a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d11d      	bne.n	80021dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021aa:	2b80      	cmp	r3, #128	; 0x80
 80021ac:	d016      	beq.n	80021dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2220      	movs	r2, #32
 80021b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	f043 0220 	orr.w	r2, r3, #32
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e007      	b.n	80021ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e6:	2b80      	cmp	r3, #128	; 0x80
 80021e8:	d1c3      	bne.n	8002172 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002200:	e034      	b.n	800226c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 f83e 	bl	8002284 <I2C_IsAcknowledgeFailed>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e034      	b.n	800227c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002218:	d028      	beq.n	800226c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800221a:	f7ff f8cb 	bl	80013b4 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	429a      	cmp	r2, r3
 8002228:	d302      	bcc.n	8002230 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d11d      	bne.n	800226c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	2b04      	cmp	r3, #4
 800223c:	d016      	beq.n	800226c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2220      	movs	r2, #32
 8002248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	f043 0220 	orr.w	r2, r3, #32
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e007      	b.n	800227c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	2b04      	cmp	r3, #4
 8002278:	d1c3      	bne.n	8002202 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800229a:	d11b      	bne.n	80022d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2220      	movs	r2, #32
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	f043 0204 	orr.w	r2, r3, #4
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e000      	b.n	80022d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
	...

080022e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e267      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d075      	beq.n	80023ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002302:	4b88      	ldr	r3, [pc, #544]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b04      	cmp	r3, #4
 800230c:	d00c      	beq.n	8002328 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800230e:	4b85      	ldr	r3, [pc, #532]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002316:	2b08      	cmp	r3, #8
 8002318:	d112      	bne.n	8002340 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800231a:	4b82      	ldr	r3, [pc, #520]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002322:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002326:	d10b      	bne.n	8002340 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002328:	4b7e      	ldr	r3, [pc, #504]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d05b      	beq.n	80023ec <HAL_RCC_OscConfig+0x108>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d157      	bne.n	80023ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e242      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002348:	d106      	bne.n	8002358 <HAL_RCC_OscConfig+0x74>
 800234a:	4b76      	ldr	r3, [pc, #472]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a75      	ldr	r2, [pc, #468]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	e01d      	b.n	8002394 <HAL_RCC_OscConfig+0xb0>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002360:	d10c      	bne.n	800237c <HAL_RCC_OscConfig+0x98>
 8002362:	4b70      	ldr	r3, [pc, #448]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a6f      	ldr	r2, [pc, #444]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	4b6d      	ldr	r3, [pc, #436]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a6c      	ldr	r2, [pc, #432]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	e00b      	b.n	8002394 <HAL_RCC_OscConfig+0xb0>
 800237c:	4b69      	ldr	r3, [pc, #420]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a68      	ldr	r2, [pc, #416]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002386:	6013      	str	r3, [r2, #0]
 8002388:	4b66      	ldr	r3, [pc, #408]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a65      	ldr	r2, [pc, #404]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 800238e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d013      	beq.n	80023c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7ff f80a 	bl	80013b4 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a4:	f7ff f806 	bl	80013b4 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b64      	cmp	r3, #100	; 0x64
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e207      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	4b5b      	ldr	r3, [pc, #364]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0f0      	beq.n	80023a4 <HAL_RCC_OscConfig+0xc0>
 80023c2:	e014      	b.n	80023ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c4:	f7fe fff6 	bl	80013b4 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023cc:	f7fe fff2 	bl	80013b4 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b64      	cmp	r3, #100	; 0x64
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e1f3      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023de:	4b51      	ldr	r3, [pc, #324]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_OscConfig+0xe8>
 80023ea:	e000      	b.n	80023ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d063      	beq.n	80024c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023fa:	4b4a      	ldr	r3, [pc, #296]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00b      	beq.n	800241e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002406:	4b47      	ldr	r3, [pc, #284]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800240e:	2b08      	cmp	r3, #8
 8002410:	d11c      	bne.n	800244c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002412:	4b44      	ldr	r3, [pc, #272]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d116      	bne.n	800244c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241e:	4b41      	ldr	r3, [pc, #260]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <HAL_RCC_OscConfig+0x152>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d001      	beq.n	8002436 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e1c7      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002436:	4b3b      	ldr	r3, [pc, #236]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4937      	ldr	r1, [pc, #220]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244a:	e03a      	b.n	80024c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d020      	beq.n	8002496 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002454:	4b34      	ldr	r3, [pc, #208]	; (8002528 <HAL_RCC_OscConfig+0x244>)
 8002456:	2201      	movs	r2, #1
 8002458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245a:	f7fe ffab 	bl	80013b4 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002462:	f7fe ffa7 	bl	80013b4 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e1a8      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002474:	4b2b      	ldr	r3, [pc, #172]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f0      	beq.n	8002462 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002480:	4b28      	ldr	r3, [pc, #160]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	4925      	ldr	r1, [pc, #148]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002490:	4313      	orrs	r3, r2
 8002492:	600b      	str	r3, [r1, #0]
 8002494:	e015      	b.n	80024c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002496:	4b24      	ldr	r3, [pc, #144]	; (8002528 <HAL_RCC_OscConfig+0x244>)
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249c:	f7fe ff8a 	bl	80013b4 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a4:	f7fe ff86 	bl	80013b4 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e187      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b6:	4b1b      	ldr	r3, [pc, #108]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d036      	beq.n	800253c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d016      	beq.n	8002504 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024d6:	4b15      	ldr	r3, [pc, #84]	; (800252c <HAL_RCC_OscConfig+0x248>)
 80024d8:	2201      	movs	r2, #1
 80024da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024dc:	f7fe ff6a 	bl	80013b4 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024e4:	f7fe ff66 	bl	80013b4 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e167      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f6:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 80024f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0x200>
 8002502:	e01b      	b.n	800253c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002504:	4b09      	ldr	r3, [pc, #36]	; (800252c <HAL_RCC_OscConfig+0x248>)
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250a:	f7fe ff53 	bl	80013b4 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002510:	e00e      	b.n	8002530 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002512:	f7fe ff4f 	bl	80013b4 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d907      	bls.n	8002530 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e150      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
 8002524:	40023800 	.word	0x40023800
 8002528:	42470000 	.word	0x42470000
 800252c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002530:	4b88      	ldr	r3, [pc, #544]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 8002532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1ea      	bne.n	8002512 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 8097 	beq.w	8002678 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800254a:	2300      	movs	r3, #0
 800254c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800254e:	4b81      	ldr	r3, [pc, #516]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10f      	bne.n	800257a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	4b7d      	ldr	r3, [pc, #500]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	4a7c      	ldr	r2, [pc, #496]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 8002564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002568:	6413      	str	r3, [r2, #64]	; 0x40
 800256a:	4b7a      	ldr	r3, [pc, #488]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002576:	2301      	movs	r3, #1
 8002578:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257a:	4b77      	ldr	r3, [pc, #476]	; (8002758 <HAL_RCC_OscConfig+0x474>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002582:	2b00      	cmp	r3, #0
 8002584:	d118      	bne.n	80025b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002586:	4b74      	ldr	r3, [pc, #464]	; (8002758 <HAL_RCC_OscConfig+0x474>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a73      	ldr	r2, [pc, #460]	; (8002758 <HAL_RCC_OscConfig+0x474>)
 800258c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002592:	f7fe ff0f 	bl	80013b4 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259a:	f7fe ff0b 	bl	80013b4 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e10c      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ac:	4b6a      	ldr	r3, [pc, #424]	; (8002758 <HAL_RCC_OscConfig+0x474>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d106      	bne.n	80025ce <HAL_RCC_OscConfig+0x2ea>
 80025c0:	4b64      	ldr	r3, [pc, #400]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80025c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c4:	4a63      	ldr	r2, [pc, #396]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	6713      	str	r3, [r2, #112]	; 0x70
 80025cc:	e01c      	b.n	8002608 <HAL_RCC_OscConfig+0x324>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	2b05      	cmp	r3, #5
 80025d4:	d10c      	bne.n	80025f0 <HAL_RCC_OscConfig+0x30c>
 80025d6:	4b5f      	ldr	r3, [pc, #380]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80025d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025da:	4a5e      	ldr	r2, [pc, #376]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80025dc:	f043 0304 	orr.w	r3, r3, #4
 80025e0:	6713      	str	r3, [r2, #112]	; 0x70
 80025e2:	4b5c      	ldr	r3, [pc, #368]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80025e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e6:	4a5b      	ldr	r2, [pc, #364]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	6713      	str	r3, [r2, #112]	; 0x70
 80025ee:	e00b      	b.n	8002608 <HAL_RCC_OscConfig+0x324>
 80025f0:	4b58      	ldr	r3, [pc, #352]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80025f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f4:	4a57      	ldr	r2, [pc, #348]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80025f6:	f023 0301 	bic.w	r3, r3, #1
 80025fa:	6713      	str	r3, [r2, #112]	; 0x70
 80025fc:	4b55      	ldr	r3, [pc, #340]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80025fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002600:	4a54      	ldr	r2, [pc, #336]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 8002602:	f023 0304 	bic.w	r3, r3, #4
 8002606:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d015      	beq.n	800263c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002610:	f7fe fed0 	bl	80013b4 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002616:	e00a      	b.n	800262e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002618:	f7fe fecc 	bl	80013b4 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	f241 3288 	movw	r2, #5000	; 0x1388
 8002626:	4293      	cmp	r3, r2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e0cb      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262e:	4b49      	ldr	r3, [pc, #292]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 8002630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0ee      	beq.n	8002618 <HAL_RCC_OscConfig+0x334>
 800263a:	e014      	b.n	8002666 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263c:	f7fe feba 	bl	80013b4 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002642:	e00a      	b.n	800265a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002644:	f7fe feb6 	bl	80013b4 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002652:	4293      	cmp	r3, r2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e0b5      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800265a:	4b3e      	ldr	r3, [pc, #248]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 800265c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1ee      	bne.n	8002644 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002666:	7dfb      	ldrb	r3, [r7, #23]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d105      	bne.n	8002678 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800266c:	4b39      	ldr	r3, [pc, #228]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	4a38      	ldr	r2, [pc, #224]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 8002672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002676:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 80a1 	beq.w	80027c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002682:	4b34      	ldr	r3, [pc, #208]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 030c 	and.w	r3, r3, #12
 800268a:	2b08      	cmp	r3, #8
 800268c:	d05c      	beq.n	8002748 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	2b02      	cmp	r3, #2
 8002694:	d141      	bne.n	800271a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002696:	4b31      	ldr	r3, [pc, #196]	; (800275c <HAL_RCC_OscConfig+0x478>)
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269c:	f7fe fe8a 	bl	80013b4 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a4:	f7fe fe86 	bl	80013b4 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e087      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b6:	4b27      	ldr	r3, [pc, #156]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f0      	bne.n	80026a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69da      	ldr	r2, [r3, #28]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	019b      	lsls	r3, r3, #6
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d8:	085b      	lsrs	r3, r3, #1
 80026da:	3b01      	subs	r3, #1
 80026dc:	041b      	lsls	r3, r3, #16
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e4:	061b      	lsls	r3, r3, #24
 80026e6:	491b      	ldr	r1, [pc, #108]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026ec:	4b1b      	ldr	r3, [pc, #108]	; (800275c <HAL_RCC_OscConfig+0x478>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f2:	f7fe fe5f 	bl	80013b4 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fa:	f7fe fe5b 	bl	80013b4 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e05c      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0f0      	beq.n	80026fa <HAL_RCC_OscConfig+0x416>
 8002718:	e054      	b.n	80027c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271a:	4b10      	ldr	r3, [pc, #64]	; (800275c <HAL_RCC_OscConfig+0x478>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002720:	f7fe fe48 	bl	80013b4 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002728:	f7fe fe44 	bl	80013b4 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e045      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0x444>
 8002746:	e03d      	b.n	80027c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d107      	bne.n	8002760 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e038      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
 8002754:	40023800 	.word	0x40023800
 8002758:	40007000 	.word	0x40007000
 800275c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002760:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <HAL_RCC_OscConfig+0x4ec>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d028      	beq.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002778:	429a      	cmp	r2, r3
 800277a:	d121      	bne.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002786:	429a      	cmp	r2, r3
 8002788:	d11a      	bne.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002790:	4013      	ands	r3, r2
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002796:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002798:	4293      	cmp	r3, r2
 800279a:	d111      	bne.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a6:	085b      	lsrs	r3, r3, #1
 80027a8:	3b01      	subs	r3, #1
 80027aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d107      	bne.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027bc:	429a      	cmp	r2, r3
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e000      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40023800 	.word	0x40023800

080027d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e0cc      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027e8:	4b68      	ldr	r3, [pc, #416]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d90c      	bls.n	8002810 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f6:	4b65      	ldr	r3, [pc, #404]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fe:	4b63      	ldr	r3, [pc, #396]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d001      	beq.n	8002810 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0b8      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d020      	beq.n	800285e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002828:	4b59      	ldr	r3, [pc, #356]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a58      	ldr	r2, [pc, #352]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002832:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002840:	4b53      	ldr	r3, [pc, #332]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	4a52      	ldr	r2, [pc, #328]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800284a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800284c:	4b50      	ldr	r3, [pc, #320]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	494d      	ldr	r1, [pc, #308]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	4313      	orrs	r3, r2
 800285c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d044      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d107      	bne.n	8002882 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002872:	4b47      	ldr	r3, [pc, #284]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d119      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e07f      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d003      	beq.n	8002892 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800288e:	2b03      	cmp	r3, #3
 8002890:	d107      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002892:	4b3f      	ldr	r3, [pc, #252]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d109      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e06f      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a2:	4b3b      	ldr	r3, [pc, #236]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e067      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028b2:	4b37      	ldr	r3, [pc, #220]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f023 0203 	bic.w	r2, r3, #3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	4934      	ldr	r1, [pc, #208]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028c4:	f7fe fd76 	bl	80013b4 <HAL_GetTick>
 80028c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	e00a      	b.n	80028e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028cc:	f7fe fd72 	bl	80013b4 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028da:	4293      	cmp	r3, r2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e04f      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e2:	4b2b      	ldr	r3, [pc, #172]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 020c 	and.w	r2, r3, #12
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d1eb      	bne.n	80028cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028f4:	4b25      	ldr	r3, [pc, #148]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d20c      	bcs.n	800291c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002902:	4b22      	ldr	r3, [pc, #136]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800290a:	4b20      	ldr	r3, [pc, #128]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d001      	beq.n	800291c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e032      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002928:	4b19      	ldr	r3, [pc, #100]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	4916      	ldr	r1, [pc, #88]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	4313      	orrs	r3, r2
 8002938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b00      	cmp	r3, #0
 8002944:	d009      	beq.n	800295a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002946:	4b12      	ldr	r3, [pc, #72]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	490e      	ldr	r1, [pc, #56]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	4313      	orrs	r3, r2
 8002958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800295a:	f000 f821 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 800295e:	4602      	mov	r2, r0
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	091b      	lsrs	r3, r3, #4
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	490a      	ldr	r1, [pc, #40]	; (8002994 <HAL_RCC_ClockConfig+0x1c0>)
 800296c:	5ccb      	ldrb	r3, [r1, r3]
 800296e:	fa22 f303 	lsr.w	r3, r2, r3
 8002972:	4a09      	ldr	r2, [pc, #36]	; (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 8002974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002976:	4b09      	ldr	r3, [pc, #36]	; (800299c <HAL_RCC_ClockConfig+0x1c8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe fcd6 	bl	800132c <HAL_InitTick>

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40023c00 	.word	0x40023c00
 8002990:	40023800 	.word	0x40023800
 8002994:	08004ce0 	.word	0x08004ce0
 8002998:	20000000 	.word	0x20000000
 800299c:	20000004 	.word	0x20000004

080029a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029a4:	b094      	sub	sp, #80	; 0x50
 80029a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	647b      	str	r3, [r7, #68]	; 0x44
 80029ac:	2300      	movs	r3, #0
 80029ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029b0:	2300      	movs	r3, #0
 80029b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029b8:	4b79      	ldr	r3, [pc, #484]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 030c 	and.w	r3, r3, #12
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d00d      	beq.n	80029e0 <HAL_RCC_GetSysClockFreq+0x40>
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	f200 80e1 	bhi.w	8002b8c <HAL_RCC_GetSysClockFreq+0x1ec>
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d002      	beq.n	80029d4 <HAL_RCC_GetSysClockFreq+0x34>
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d003      	beq.n	80029da <HAL_RCC_GetSysClockFreq+0x3a>
 80029d2:	e0db      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029d4:	4b73      	ldr	r3, [pc, #460]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x204>)
 80029d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80029d8:	e0db      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029da:	4b73      	ldr	r3, [pc, #460]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x208>)
 80029dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029de:	e0d8      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029e0:	4b6f      	ldr	r3, [pc, #444]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029ea:	4b6d      	ldr	r3, [pc, #436]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d063      	beq.n	8002abe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029f6:	4b6a      	ldr	r3, [pc, #424]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	099b      	lsrs	r3, r3, #6
 80029fc:	2200      	movs	r2, #0
 80029fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a08:	633b      	str	r3, [r7, #48]	; 0x30
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a12:	4622      	mov	r2, r4
 8002a14:	462b      	mov	r3, r5
 8002a16:	f04f 0000 	mov.w	r0, #0
 8002a1a:	f04f 0100 	mov.w	r1, #0
 8002a1e:	0159      	lsls	r1, r3, #5
 8002a20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a24:	0150      	lsls	r0, r2, #5
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	4621      	mov	r1, r4
 8002a2c:	1a51      	subs	r1, r2, r1
 8002a2e:	6139      	str	r1, [r7, #16]
 8002a30:	4629      	mov	r1, r5
 8002a32:	eb63 0301 	sbc.w	r3, r3, r1
 8002a36:	617b      	str	r3, [r7, #20]
 8002a38:	f04f 0200 	mov.w	r2, #0
 8002a3c:	f04f 0300 	mov.w	r3, #0
 8002a40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a44:	4659      	mov	r1, fp
 8002a46:	018b      	lsls	r3, r1, #6
 8002a48:	4651      	mov	r1, sl
 8002a4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a4e:	4651      	mov	r1, sl
 8002a50:	018a      	lsls	r2, r1, #6
 8002a52:	4651      	mov	r1, sl
 8002a54:	ebb2 0801 	subs.w	r8, r2, r1
 8002a58:	4659      	mov	r1, fp
 8002a5a:	eb63 0901 	sbc.w	r9, r3, r1
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a72:	4690      	mov	r8, r2
 8002a74:	4699      	mov	r9, r3
 8002a76:	4623      	mov	r3, r4
 8002a78:	eb18 0303 	adds.w	r3, r8, r3
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	462b      	mov	r3, r5
 8002a80:	eb49 0303 	adc.w	r3, r9, r3
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	f04f 0300 	mov.w	r3, #0
 8002a8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a92:	4629      	mov	r1, r5
 8002a94:	024b      	lsls	r3, r1, #9
 8002a96:	4621      	mov	r1, r4
 8002a98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a9c:	4621      	mov	r1, r4
 8002a9e:	024a      	lsls	r2, r1, #9
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002aac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ab0:	f7fd fbe6 	bl	8000280 <__aeabi_uldivmod>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	4613      	mov	r3, r2
 8002aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002abc:	e058      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002abe:	4b38      	ldr	r3, [pc, #224]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	099b      	lsrs	r3, r3, #6
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	4611      	mov	r1, r2
 8002aca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ace:	623b      	str	r3, [r7, #32]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ad8:	4642      	mov	r2, r8
 8002ada:	464b      	mov	r3, r9
 8002adc:	f04f 0000 	mov.w	r0, #0
 8002ae0:	f04f 0100 	mov.w	r1, #0
 8002ae4:	0159      	lsls	r1, r3, #5
 8002ae6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aea:	0150      	lsls	r0, r2, #5
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4641      	mov	r1, r8
 8002af2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002af6:	4649      	mov	r1, r9
 8002af8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b10:	ebb2 040a 	subs.w	r4, r2, sl
 8002b14:	eb63 050b 	sbc.w	r5, r3, fp
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	00eb      	lsls	r3, r5, #3
 8002b22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b26:	00e2      	lsls	r2, r4, #3
 8002b28:	4614      	mov	r4, r2
 8002b2a:	461d      	mov	r5, r3
 8002b2c:	4643      	mov	r3, r8
 8002b2e:	18e3      	adds	r3, r4, r3
 8002b30:	603b      	str	r3, [r7, #0]
 8002b32:	464b      	mov	r3, r9
 8002b34:	eb45 0303 	adc.w	r3, r5, r3
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b46:	4629      	mov	r1, r5
 8002b48:	028b      	lsls	r3, r1, #10
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b50:	4621      	mov	r1, r4
 8002b52:	028a      	lsls	r2, r1, #10
 8002b54:	4610      	mov	r0, r2
 8002b56:	4619      	mov	r1, r3
 8002b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	61bb      	str	r3, [r7, #24]
 8002b5e:	61fa      	str	r2, [r7, #28]
 8002b60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b64:	f7fd fb8c 	bl	8000280 <__aeabi_uldivmod>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	0c1b      	lsrs	r3, r3, #16
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002b80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b8a:	e002      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b8c:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3750      	adds	r7, #80	; 0x50
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	00f42400 	.word	0x00f42400
 8002ba8:	007a1200 	.word	0x007a1200

08002bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb0:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20000000 	.word	0x20000000

08002bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bc8:	f7ff fff0 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	0a9b      	lsrs	r3, r3, #10
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	4903      	ldr	r1, [pc, #12]	; (8002be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bda:	5ccb      	ldrb	r3, [r1, r3]
 8002bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40023800 	.word	0x40023800
 8002be8:	08004cf0 	.word	0x08004cf0

08002bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bf0:	f7ff ffdc 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	0b5b      	lsrs	r3, r3, #13
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	4903      	ldr	r1, [pc, #12]	; (8002c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c02:	5ccb      	ldrb	r3, [r1, r3]
 8002c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	08004cf0 	.word	0x08004cf0

08002c14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e041      	b.n	8002caa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d106      	bne.n	8002c40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7fd fe02 	bl	8000844 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2202      	movs	r2, #2
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3304      	adds	r3, #4
 8002c50:	4619      	mov	r1, r3
 8002c52:	4610      	mov	r0, r2
 8002c54:	f000 fc60 	bl	8003518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e041      	b.n	8002d48 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d106      	bne.n	8002cde <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f839 	bl	8002d50 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3304      	adds	r3, #4
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	f000 fc11 	bl	8003518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d104      	bne.n	8002d82 <HAL_TIM_IC_Start_IT+0x1e>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	e013      	b.n	8002daa <HAL_TIM_IC_Start_IT+0x46>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d104      	bne.n	8002d92 <HAL_TIM_IC_Start_IT+0x2e>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	e00b      	b.n	8002daa <HAL_TIM_IC_Start_IT+0x46>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d104      	bne.n	8002da2 <HAL_TIM_IC_Start_IT+0x3e>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	e003      	b.n	8002daa <HAL_TIM_IC_Start_IT+0x46>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d104      	bne.n	8002dbc <HAL_TIM_IC_Start_IT+0x58>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	e013      	b.n	8002de4 <HAL_TIM_IC_Start_IT+0x80>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d104      	bne.n	8002dcc <HAL_TIM_IC_Start_IT+0x68>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	e00b      	b.n	8002de4 <HAL_TIM_IC_Start_IT+0x80>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d104      	bne.n	8002ddc <HAL_TIM_IC_Start_IT+0x78>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	e003      	b.n	8002de4 <HAL_TIM_IC_Start_IT+0x80>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002de6:	7bbb      	ldrb	r3, [r7, #14]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d102      	bne.n	8002df2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002dec:	7b7b      	ldrb	r3, [r7, #13]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d001      	beq.n	8002df6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e0c2      	b.n	8002f7c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d104      	bne.n	8002e06 <HAL_TIM_IC_Start_IT+0xa2>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e04:	e013      	b.n	8002e2e <HAL_TIM_IC_Start_IT+0xca>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	d104      	bne.n	8002e16 <HAL_TIM_IC_Start_IT+0xb2>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e14:	e00b      	b.n	8002e2e <HAL_TIM_IC_Start_IT+0xca>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d104      	bne.n	8002e26 <HAL_TIM_IC_Start_IT+0xc2>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e24:	e003      	b.n	8002e2e <HAL_TIM_IC_Start_IT+0xca>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2202      	movs	r2, #2
 8002e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d104      	bne.n	8002e3e <HAL_TIM_IC_Start_IT+0xda>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2202      	movs	r2, #2
 8002e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e3c:	e013      	b.n	8002e66 <HAL_TIM_IC_Start_IT+0x102>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d104      	bne.n	8002e4e <HAL_TIM_IC_Start_IT+0xea>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2202      	movs	r2, #2
 8002e48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e4c:	e00b      	b.n	8002e66 <HAL_TIM_IC_Start_IT+0x102>
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d104      	bne.n	8002e5e <HAL_TIM_IC_Start_IT+0xfa>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e5c:	e003      	b.n	8002e66 <HAL_TIM_IC_Start_IT+0x102>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2202      	movs	r2, #2
 8002e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b0c      	cmp	r3, #12
 8002e6a:	d841      	bhi.n	8002ef0 <HAL_TIM_IC_Start_IT+0x18c>
 8002e6c:	a201      	add	r2, pc, #4	; (adr r2, 8002e74 <HAL_TIM_IC_Start_IT+0x110>)
 8002e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e72:	bf00      	nop
 8002e74:	08002ea9 	.word	0x08002ea9
 8002e78:	08002ef1 	.word	0x08002ef1
 8002e7c:	08002ef1 	.word	0x08002ef1
 8002e80:	08002ef1 	.word	0x08002ef1
 8002e84:	08002ebb 	.word	0x08002ebb
 8002e88:	08002ef1 	.word	0x08002ef1
 8002e8c:	08002ef1 	.word	0x08002ef1
 8002e90:	08002ef1 	.word	0x08002ef1
 8002e94:	08002ecd 	.word	0x08002ecd
 8002e98:	08002ef1 	.word	0x08002ef1
 8002e9c:	08002ef1 	.word	0x08002ef1
 8002ea0:	08002ef1 	.word	0x08002ef1
 8002ea4:	08002edf 	.word	0x08002edf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0202 	orr.w	r2, r2, #2
 8002eb6:	60da      	str	r2, [r3, #12]
      break;
 8002eb8:	e01d      	b.n	8002ef6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f042 0204 	orr.w	r2, r2, #4
 8002ec8:	60da      	str	r2, [r3, #12]
      break;
 8002eca:	e014      	b.n	8002ef6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0208 	orr.w	r2, r2, #8
 8002eda:	60da      	str	r2, [r3, #12]
      break;
 8002edc:	e00b      	b.n	8002ef6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0210 	orr.w	r2, r2, #16
 8002eec:	60da      	str	r2, [r3, #12]
      break;
 8002eee:	e002      	b.n	8002ef6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ef4:	bf00      	nop
  }

  if (status == HAL_OK)
 8002ef6:	7bfb      	ldrb	r3, [r7, #15]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d13e      	bne.n	8002f7a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2201      	movs	r2, #1
 8002f02:	6839      	ldr	r1, [r7, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 fd4b 	bl	80039a0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a1d      	ldr	r2, [pc, #116]	; (8002f84 <HAL_TIM_IC_Start_IT+0x220>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d018      	beq.n	8002f46 <HAL_TIM_IC_Start_IT+0x1e2>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f1c:	d013      	beq.n	8002f46 <HAL_TIM_IC_Start_IT+0x1e2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a19      	ldr	r2, [pc, #100]	; (8002f88 <HAL_TIM_IC_Start_IT+0x224>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d00e      	beq.n	8002f46 <HAL_TIM_IC_Start_IT+0x1e2>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a17      	ldr	r2, [pc, #92]	; (8002f8c <HAL_TIM_IC_Start_IT+0x228>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d009      	beq.n	8002f46 <HAL_TIM_IC_Start_IT+0x1e2>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a16      	ldr	r2, [pc, #88]	; (8002f90 <HAL_TIM_IC_Start_IT+0x22c>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d004      	beq.n	8002f46 <HAL_TIM_IC_Start_IT+0x1e2>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a14      	ldr	r2, [pc, #80]	; (8002f94 <HAL_TIM_IC_Start_IT+0x230>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d111      	bne.n	8002f6a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2b06      	cmp	r3, #6
 8002f56:	d010      	beq.n	8002f7a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f68:	e007      	b.n	8002f7a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f042 0201 	orr.w	r2, r2, #1
 8002f78:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40010000 	.word	0x40010000
 8002f88:	40000400 	.word	0x40000400
 8002f8c:	40000800 	.word	0x40000800
 8002f90:	40000c00 	.word	0x40000c00
 8002f94:	40014000 	.word	0x40014000

08002f98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d020      	beq.n	8002ffc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d01b      	beq.n	8002ffc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f06f 0202 	mvn.w	r2, #2
 8002fcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7fd fd6c 	bl	8000ac0 <HAL_TIM_IC_CaptureCallback>
 8002fe8:	e005      	b.n	8002ff6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 fa76 	bl	80034dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 fa7d 	bl	80034f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b00      	cmp	r3, #0
 8003004:	d020      	beq.n	8003048 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d01b      	beq.n	8003048 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f06f 0204 	mvn.w	r2, #4
 8003018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2202      	movs	r2, #2
 800301e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7fd fd46 	bl	8000ac0 <HAL_TIM_IC_CaptureCallback>
 8003034:	e005      	b.n	8003042 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 fa50 	bl	80034dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 fa57 	bl	80034f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d020      	beq.n	8003094 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b00      	cmp	r3, #0
 800305a:	d01b      	beq.n	8003094 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0208 	mvn.w	r2, #8
 8003064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2204      	movs	r2, #4
 800306a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7fd fd20 	bl	8000ac0 <HAL_TIM_IC_CaptureCallback>
 8003080:	e005      	b.n	800308e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fa2a 	bl	80034dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 fa31 	bl	80034f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f003 0310 	and.w	r3, r3, #16
 800309a:	2b00      	cmp	r3, #0
 800309c:	d020      	beq.n	80030e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f003 0310 	and.w	r3, r3, #16
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d01b      	beq.n	80030e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f06f 0210 	mvn.w	r2, #16
 80030b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2208      	movs	r2, #8
 80030b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7fd fcfa 	bl	8000ac0 <HAL_TIM_IC_CaptureCallback>
 80030cc:	e005      	b.n	80030da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 fa04 	bl	80034dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 fa0b 	bl	80034f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00c      	beq.n	8003104 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d007      	beq.n	8003104 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 0201 	mvn.w	r2, #1
 80030fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f9e2 	bl	80034c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00c      	beq.n	8003128 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003114:	2b00      	cmp	r3, #0
 8003116:	d007      	beq.n	8003128 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fcda 	bl	8003adc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00c      	beq.n	800314c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003138:	2b00      	cmp	r3, #0
 800313a:	d007      	beq.n	800314c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f9dc 	bl	8003504 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	f003 0320 	and.w	r3, r3, #32
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00c      	beq.n	8003170 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f003 0320 	and.w	r3, r3, #32
 800315c:	2b00      	cmp	r3, #0
 800315e:	d007      	beq.n	8003170 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f06f 0220 	mvn.w	r2, #32
 8003168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fcac 	bl	8003ac8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003170:	bf00      	nop
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003184:	2300      	movs	r3, #0
 8003186:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800318e:	2b01      	cmp	r3, #1
 8003190:	d101      	bne.n	8003196 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003192:	2302      	movs	r3, #2
 8003194:	e088      	b.n	80032a8 <HAL_TIM_IC_ConfigChannel+0x130>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d11b      	bne.n	80031dc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80031b4:	f000 fa3c 	bl	8003630 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699a      	ldr	r2, [r3, #24]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 020c 	bic.w	r2, r2, #12
 80031c6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6999      	ldr	r1, [r3, #24]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	619a      	str	r2, [r3, #24]
 80031da:	e060      	b.n	800329e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d11c      	bne.n	800321c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80031f2:	f000 fab4 	bl	800375e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	699a      	ldr	r2, [r3, #24]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003204:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6999      	ldr	r1, [r3, #24]
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	021a      	lsls	r2, r3, #8
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	619a      	str	r2, [r3, #24]
 800321a:	e040      	b.n	800329e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b08      	cmp	r3, #8
 8003220:	d11b      	bne.n	800325a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003232:	f000 fb01 	bl	8003838 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	69da      	ldr	r2, [r3, #28]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 020c 	bic.w	r2, r2, #12
 8003244:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	69d9      	ldr	r1, [r3, #28]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	430a      	orrs	r2, r1
 8003256:	61da      	str	r2, [r3, #28]
 8003258:	e021      	b.n	800329e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b0c      	cmp	r3, #12
 800325e:	d11c      	bne.n	800329a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003270:	f000 fb1e 	bl	80038b0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	69da      	ldr	r2, [r3, #28]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003282:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	69d9      	ldr	r1, [r3, #28]
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	021a      	lsls	r2, r3, #8
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	61da      	str	r2, [r3, #28]
 8003298:	e001      	b.n	800329e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3718      	adds	r7, #24
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d101      	bne.n	80032cc <HAL_TIM_ConfigClockSource+0x1c>
 80032c8:	2302      	movs	r3, #2
 80032ca:	e0b4      	b.n	8003436 <HAL_TIM_ConfigClockSource+0x186>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003304:	d03e      	beq.n	8003384 <HAL_TIM_ConfigClockSource+0xd4>
 8003306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800330a:	f200 8087 	bhi.w	800341c <HAL_TIM_ConfigClockSource+0x16c>
 800330e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003312:	f000 8086 	beq.w	8003422 <HAL_TIM_ConfigClockSource+0x172>
 8003316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331a:	d87f      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x16c>
 800331c:	2b70      	cmp	r3, #112	; 0x70
 800331e:	d01a      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0xa6>
 8003320:	2b70      	cmp	r3, #112	; 0x70
 8003322:	d87b      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x16c>
 8003324:	2b60      	cmp	r3, #96	; 0x60
 8003326:	d050      	beq.n	80033ca <HAL_TIM_ConfigClockSource+0x11a>
 8003328:	2b60      	cmp	r3, #96	; 0x60
 800332a:	d877      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x16c>
 800332c:	2b50      	cmp	r3, #80	; 0x50
 800332e:	d03c      	beq.n	80033aa <HAL_TIM_ConfigClockSource+0xfa>
 8003330:	2b50      	cmp	r3, #80	; 0x50
 8003332:	d873      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x16c>
 8003334:	2b40      	cmp	r3, #64	; 0x40
 8003336:	d058      	beq.n	80033ea <HAL_TIM_ConfigClockSource+0x13a>
 8003338:	2b40      	cmp	r3, #64	; 0x40
 800333a:	d86f      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x16c>
 800333c:	2b30      	cmp	r3, #48	; 0x30
 800333e:	d064      	beq.n	800340a <HAL_TIM_ConfigClockSource+0x15a>
 8003340:	2b30      	cmp	r3, #48	; 0x30
 8003342:	d86b      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x16c>
 8003344:	2b20      	cmp	r3, #32
 8003346:	d060      	beq.n	800340a <HAL_TIM_ConfigClockSource+0x15a>
 8003348:	2b20      	cmp	r3, #32
 800334a:	d867      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x16c>
 800334c:	2b00      	cmp	r3, #0
 800334e:	d05c      	beq.n	800340a <HAL_TIM_ConfigClockSource+0x15a>
 8003350:	2b10      	cmp	r3, #16
 8003352:	d05a      	beq.n	800340a <HAL_TIM_ConfigClockSource+0x15a>
 8003354:	e062      	b.n	800341c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003366:	f000 fafb 	bl	8003960 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003378:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	609a      	str	r2, [r3, #8]
      break;
 8003382:	e04f      	b.n	8003424 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003394:	f000 fae4 	bl	8003960 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033a6:	609a      	str	r2, [r3, #8]
      break;
 80033a8:	e03c      	b.n	8003424 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033b6:	461a      	mov	r2, r3
 80033b8:	f000 f9a2 	bl	8003700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2150      	movs	r1, #80	; 0x50
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 fab1 	bl	800392a <TIM_ITRx_SetConfig>
      break;
 80033c8:	e02c      	b.n	8003424 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033d6:	461a      	mov	r2, r3
 80033d8:	f000 f9fe 	bl	80037d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2160      	movs	r1, #96	; 0x60
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 faa1 	bl	800392a <TIM_ITRx_SetConfig>
      break;
 80033e8:	e01c      	b.n	8003424 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033f6:	461a      	mov	r2, r3
 80033f8:	f000 f982 	bl	8003700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2140      	movs	r1, #64	; 0x40
 8003402:	4618      	mov	r0, r3
 8003404:	f000 fa91 	bl	800392a <TIM_ITRx_SetConfig>
      break;
 8003408:	e00c      	b.n	8003424 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4619      	mov	r1, r3
 8003414:	4610      	mov	r0, r2
 8003416:	f000 fa88 	bl	800392a <TIM_ITRx_SetConfig>
      break;
 800341a:	e003      	b.n	8003424 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	73fb      	strb	r3, [r7, #15]
      break;
 8003420:	e000      	b.n	8003424 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003422:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003434:	7bfb      	ldrb	r3, [r7, #15]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	2b0c      	cmp	r3, #12
 8003452:	d831      	bhi.n	80034b8 <HAL_TIM_ReadCapturedValue+0x78>
 8003454:	a201      	add	r2, pc, #4	; (adr r2, 800345c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345a:	bf00      	nop
 800345c:	08003491 	.word	0x08003491
 8003460:	080034b9 	.word	0x080034b9
 8003464:	080034b9 	.word	0x080034b9
 8003468:	080034b9 	.word	0x080034b9
 800346c:	0800349b 	.word	0x0800349b
 8003470:	080034b9 	.word	0x080034b9
 8003474:	080034b9 	.word	0x080034b9
 8003478:	080034b9 	.word	0x080034b9
 800347c:	080034a5 	.word	0x080034a5
 8003480:	080034b9 	.word	0x080034b9
 8003484:	080034b9 	.word	0x080034b9
 8003488:	080034b9 	.word	0x080034b9
 800348c:	080034af 	.word	0x080034af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003496:	60fb      	str	r3, [r7, #12]

      break;
 8003498:	e00f      	b.n	80034ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a0:	60fb      	str	r3, [r7, #12]

      break;
 80034a2:	e00a      	b.n	80034ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034aa:	60fb      	str	r3, [r7, #12]

      break;
 80034ac:	e005      	b.n	80034ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	60fb      	str	r3, [r7, #12]

      break;
 80034b6:	e000      	b.n	80034ba <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80034b8:	bf00      	nop
  }

  return tmpreg;
 80034ba:	68fb      	ldr	r3, [r7, #12]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a3a      	ldr	r2, [pc, #232]	; (8003614 <TIM_Base_SetConfig+0xfc>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d00f      	beq.n	8003550 <TIM_Base_SetConfig+0x38>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003536:	d00b      	beq.n	8003550 <TIM_Base_SetConfig+0x38>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a37      	ldr	r2, [pc, #220]	; (8003618 <TIM_Base_SetConfig+0x100>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d007      	beq.n	8003550 <TIM_Base_SetConfig+0x38>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a36      	ldr	r2, [pc, #216]	; (800361c <TIM_Base_SetConfig+0x104>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d003      	beq.n	8003550 <TIM_Base_SetConfig+0x38>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a35      	ldr	r2, [pc, #212]	; (8003620 <TIM_Base_SetConfig+0x108>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d108      	bne.n	8003562 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003556:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	4313      	orrs	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a2b      	ldr	r2, [pc, #172]	; (8003614 <TIM_Base_SetConfig+0xfc>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d01b      	beq.n	80035a2 <TIM_Base_SetConfig+0x8a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003570:	d017      	beq.n	80035a2 <TIM_Base_SetConfig+0x8a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a28      	ldr	r2, [pc, #160]	; (8003618 <TIM_Base_SetConfig+0x100>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d013      	beq.n	80035a2 <TIM_Base_SetConfig+0x8a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a27      	ldr	r2, [pc, #156]	; (800361c <TIM_Base_SetConfig+0x104>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00f      	beq.n	80035a2 <TIM_Base_SetConfig+0x8a>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a26      	ldr	r2, [pc, #152]	; (8003620 <TIM_Base_SetConfig+0x108>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d00b      	beq.n	80035a2 <TIM_Base_SetConfig+0x8a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a25      	ldr	r2, [pc, #148]	; (8003624 <TIM_Base_SetConfig+0x10c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d007      	beq.n	80035a2 <TIM_Base_SetConfig+0x8a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a24      	ldr	r2, [pc, #144]	; (8003628 <TIM_Base_SetConfig+0x110>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d003      	beq.n	80035a2 <TIM_Base_SetConfig+0x8a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a23      	ldr	r2, [pc, #140]	; (800362c <TIM_Base_SetConfig+0x114>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d108      	bne.n	80035b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a0e      	ldr	r2, [pc, #56]	; (8003614 <TIM_Base_SetConfig+0xfc>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d103      	bne.n	80035e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d105      	bne.n	8003606 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	f023 0201 	bic.w	r2, r3, #1
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	611a      	str	r2, [r3, #16]
  }
}
 8003606:	bf00      	nop
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40010000 	.word	0x40010000
 8003618:	40000400 	.word	0x40000400
 800361c:	40000800 	.word	0x40000800
 8003620:	40000c00 	.word	0x40000c00
 8003624:	40014000 	.word	0x40014000
 8003628:	40014400 	.word	0x40014400
 800362c:	40014800 	.word	0x40014800

08003630 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f023 0201 	bic.w	r2, r3, #1
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	4a24      	ldr	r2, [pc, #144]	; (80036ec <TIM_TI1_SetConfig+0xbc>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d013      	beq.n	8003686 <TIM_TI1_SetConfig+0x56>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003664:	d00f      	beq.n	8003686 <TIM_TI1_SetConfig+0x56>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4a21      	ldr	r2, [pc, #132]	; (80036f0 <TIM_TI1_SetConfig+0xc0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d00b      	beq.n	8003686 <TIM_TI1_SetConfig+0x56>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	4a20      	ldr	r2, [pc, #128]	; (80036f4 <TIM_TI1_SetConfig+0xc4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d007      	beq.n	8003686 <TIM_TI1_SetConfig+0x56>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	4a1f      	ldr	r2, [pc, #124]	; (80036f8 <TIM_TI1_SetConfig+0xc8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d003      	beq.n	8003686 <TIM_TI1_SetConfig+0x56>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4a1e      	ldr	r2, [pc, #120]	; (80036fc <TIM_TI1_SetConfig+0xcc>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d101      	bne.n	800368a <TIM_TI1_SetConfig+0x5a>
 8003686:	2301      	movs	r3, #1
 8003688:	e000      	b.n	800368c <TIM_TI1_SetConfig+0x5c>
 800368a:	2300      	movs	r3, #0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d008      	beq.n	80036a2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f023 0303 	bic.w	r3, r3, #3
 8003696:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4313      	orrs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	e003      	b.n	80036aa <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	f023 030a 	bic.w	r3, r3, #10
 80036c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	f003 030a 	and.w	r3, r3, #10
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	621a      	str	r2, [r3, #32]
}
 80036de:	bf00      	nop
 80036e0:	371c      	adds	r7, #28
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	40010000 	.word	0x40010000
 80036f0:	40000400 	.word	0x40000400
 80036f4:	40000800 	.word	0x40000800
 80036f8:	40000c00 	.word	0x40000c00
 80036fc:	40014000 	.word	0x40014000

08003700 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	f023 0201 	bic.w	r2, r3, #1
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800372a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4313      	orrs	r3, r2
 8003734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f023 030a 	bic.w	r3, r3, #10
 800373c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	621a      	str	r2, [r3, #32]
}
 8003752:	bf00      	nop
 8003754:	371c      	adds	r7, #28
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800375e:	b480      	push	{r7}
 8003760:	b087      	sub	sp, #28
 8003762:	af00      	add	r7, sp, #0
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	607a      	str	r2, [r7, #4]
 800376a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	f023 0210 	bic.w	r2, r3, #16
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800378a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	021b      	lsls	r3, r3, #8
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4313      	orrs	r3, r2
 8003794:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800379c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	031b      	lsls	r3, r3, #12
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037b0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	4313      	orrs	r3, r2
 80037be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	621a      	str	r2, [r3, #32]
}
 80037cc:	bf00      	nop
 80037ce:	371c      	adds	r7, #28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037d8:	b480      	push	{r7}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	f023 0210 	bic.w	r2, r3, #16
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	031b      	lsls	r3, r3, #12
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	4313      	orrs	r3, r2
 800380c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003814:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	4313      	orrs	r3, r2
 800381e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	621a      	str	r2, [r3, #32]
}
 800382c:	bf00      	nop
 800382e:	371c      	adds	r7, #28
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003838:	b480      	push	{r7}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	69db      	ldr	r3, [r3, #28]
 800385c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f023 0303 	bic.w	r3, r3, #3
 8003864:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4313      	orrs	r3, r2
 800386c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003874:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	b2db      	uxtb	r3, r3
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003888:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	021b      	lsls	r3, r3, #8
 800388e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	4313      	orrs	r3, r2
 8003896:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	621a      	str	r2, [r3, #32]
}
 80038a4:	bf00      	nop
 80038a6:	371c      	adds	r7, #28
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
 80038bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038dc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	021b      	lsls	r3, r3, #8
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038ee:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	031b      	lsls	r3, r3, #12
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003902:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	031b      	lsls	r3, r3, #12
 8003908:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	4313      	orrs	r3, r2
 8003910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	621a      	str	r2, [r3, #32]
}
 800391e:	bf00      	nop
 8003920:	371c      	adds	r7, #28
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800392a:	b480      	push	{r7}
 800392c:	b085      	sub	sp, #20
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003940:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4313      	orrs	r3, r2
 8003948:	f043 0307 	orr.w	r3, r3, #7
 800394c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	609a      	str	r2, [r3, #8]
}
 8003954:	bf00      	nop
 8003956:	3714      	adds	r7, #20
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003960:	b480      	push	{r7}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
 800396c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800397a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	021a      	lsls	r2, r3, #8
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	431a      	orrs	r2, r3
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4313      	orrs	r3, r2
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	4313      	orrs	r3, r2
 800398c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	609a      	str	r2, [r3, #8]
}
 8003994:	bf00      	nop
 8003996:	371c      	adds	r7, #28
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	f003 031f 	and.w	r3, r3, #31
 80039b2:	2201      	movs	r2, #1
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a1a      	ldr	r2, [r3, #32]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	43db      	mvns	r3, r3
 80039c2:	401a      	ands	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6a1a      	ldr	r2, [r3, #32]
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	f003 031f 	and.w	r3, r3, #31
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	fa01 f303 	lsl.w	r3, r1, r3
 80039d8:	431a      	orrs	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	621a      	str	r2, [r3, #32]
}
 80039de:	bf00      	nop
 80039e0:	371c      	adds	r7, #28
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
	...

080039ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d101      	bne.n	8003a04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a00:	2302      	movs	r3, #2
 8003a02:	e050      	b.n	8003aa6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a1c      	ldr	r2, [pc, #112]	; (8003ab4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d018      	beq.n	8003a7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a50:	d013      	beq.n	8003a7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a18      	ldr	r2, [pc, #96]	; (8003ab8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00e      	beq.n	8003a7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a16      	ldr	r2, [pc, #88]	; (8003abc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d009      	beq.n	8003a7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a15      	ldr	r2, [pc, #84]	; (8003ac0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d004      	beq.n	8003a7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a13      	ldr	r2, [pc, #76]	; (8003ac4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d10c      	bne.n	8003a94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40010000 	.word	0x40010000
 8003ab8:	40000400 	.word	0x40000400
 8003abc:	40000800 	.word	0x40000800
 8003ac0:	40000c00 	.word	0x40000c00
 8003ac4:	40014000 	.word	0x40014000

08003ac8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e042      	b.n	8003b88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d106      	bne.n	8003b1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7fc fee4 	bl	80008e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2224      	movs	r2, #36	; 0x24
 8003b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f973 	bl	8003e20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	691a      	ldr	r2, [r3, #16]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	695a      	ldr	r2, [r3, #20]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2220      	movs	r2, #32
 8003b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08a      	sub	sp, #40	; 0x28
 8003b94:	af02      	add	r7, sp, #8
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	603b      	str	r3, [r7, #0]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	d175      	bne.n	8003c9c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <HAL_UART_Transmit+0x2c>
 8003bb6:	88fb      	ldrh	r3, [r7, #6]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e06e      	b.n	8003c9e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2221      	movs	r2, #33	; 0x21
 8003bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bce:	f7fd fbf1 	bl	80013b4 <HAL_GetTick>
 8003bd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	88fa      	ldrh	r2, [r7, #6]
 8003bd8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	88fa      	ldrh	r2, [r7, #6]
 8003bde:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be8:	d108      	bne.n	8003bfc <HAL_UART_Transmit+0x6c>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d104      	bne.n	8003bfc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	61bb      	str	r3, [r7, #24]
 8003bfa:	e003      	b.n	8003c04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c00:	2300      	movs	r3, #0
 8003c02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c04:	e02e      	b.n	8003c64 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	2180      	movs	r1, #128	; 0x80
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 f848 	bl	8003ca6 <UART_WaitOnFlagUntilTimeout>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e03a      	b.n	8003c9e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10b      	bne.n	8003c46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	881b      	ldrh	r3, [r3, #0]
 8003c32:	461a      	mov	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	3302      	adds	r3, #2
 8003c42:	61bb      	str	r3, [r7, #24]
 8003c44:	e007      	b.n	8003c56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	781a      	ldrb	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	3301      	adds	r3, #1
 8003c54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1cb      	bne.n	8003c06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2200      	movs	r2, #0
 8003c76:	2140      	movs	r1, #64	; 0x40
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 f814 	bl	8003ca6 <UART_WaitOnFlagUntilTimeout>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d005      	beq.n	8003c90 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e006      	b.n	8003c9e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	e000      	b.n	8003c9e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c9c:	2302      	movs	r3, #2
  }
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3720      	adds	r7, #32
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b086      	sub	sp, #24
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	60f8      	str	r0, [r7, #12]
 8003cae:	60b9      	str	r1, [r7, #8]
 8003cb0:	603b      	str	r3, [r7, #0]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cb6:	e03b      	b.n	8003d30 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cbe:	d037      	beq.n	8003d30 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc0:	f7fd fb78 	bl	80013b4 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	6a3a      	ldr	r2, [r7, #32]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d302      	bcc.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e03a      	b.n	8003d50 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d023      	beq.n	8003d30 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2b80      	cmp	r3, #128	; 0x80
 8003cec:	d020      	beq.n	8003d30 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2b40      	cmp	r3, #64	; 0x40
 8003cf2:	d01d      	beq.n	8003d30 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	d116      	bne.n	8003d30 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003d02:	2300      	movs	r3, #0
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 f81d 	bl	8003d58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2208      	movs	r2, #8
 8003d22:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e00f      	b.n	8003d50 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	bf0c      	ite	eq
 8003d40:	2301      	moveq	r3, #1
 8003d42:	2300      	movne	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	461a      	mov	r2, r3
 8003d48:	79fb      	ldrb	r3, [r7, #7]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d0b4      	beq.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b095      	sub	sp, #84	; 0x54
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	330c      	adds	r3, #12
 8003d66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d6a:	e853 3f00 	ldrex	r3, [r3]
 8003d6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	330c      	adds	r3, #12
 8003d7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d80:	643a      	str	r2, [r7, #64]	; 0x40
 8003d82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d88:	e841 2300 	strex	r3, r2, [r1]
 8003d8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1e5      	bne.n	8003d60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3314      	adds	r3, #20
 8003d9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	e853 3f00 	ldrex	r3, [r3]
 8003da2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	f023 0301 	bic.w	r3, r3, #1
 8003daa:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3314      	adds	r3, #20
 8003db2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003db4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003db6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dbc:	e841 2300 	strex	r3, r2, [r1]
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1e5      	bne.n	8003d94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d119      	bne.n	8003e04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	330c      	adds	r3, #12
 8003dd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	e853 3f00 	ldrex	r3, [r3]
 8003dde:	60bb      	str	r3, [r7, #8]
   return(result);
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f023 0310 	bic.w	r3, r3, #16
 8003de6:	647b      	str	r3, [r7, #68]	; 0x44
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	330c      	adds	r3, #12
 8003dee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003df0:	61ba      	str	r2, [r7, #24]
 8003df2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df4:	6979      	ldr	r1, [r7, #20]
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	e841 2300 	strex	r3, r2, [r1]
 8003dfc:	613b      	str	r3, [r7, #16]
   return(result);
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1e5      	bne.n	8003dd0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e12:	bf00      	nop
 8003e14:	3754      	adds	r7, #84	; 0x54
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
	...

08003e20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e24:	b0c0      	sub	sp, #256	; 0x100
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3c:	68d9      	ldr	r1, [r3, #12]
 8003e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	ea40 0301 	orr.w	r3, r0, r1
 8003e48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	431a      	orrs	r2, r3
 8003e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e78:	f021 010c 	bic.w	r1, r1, #12
 8003e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e86:	430b      	orrs	r3, r1
 8003e88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e9a:	6999      	ldr	r1, [r3, #24]
 8003e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	ea40 0301 	orr.w	r3, r0, r1
 8003ea6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	4b8f      	ldr	r3, [pc, #572]	; (80040ec <UART_SetConfig+0x2cc>)
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d005      	beq.n	8003ec0 <UART_SetConfig+0xa0>
 8003eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	4b8d      	ldr	r3, [pc, #564]	; (80040f0 <UART_SetConfig+0x2d0>)
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d104      	bne.n	8003eca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ec0:	f7fe fe94 	bl	8002bec <HAL_RCC_GetPCLK2Freq>
 8003ec4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ec8:	e003      	b.n	8003ed2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003eca:	f7fe fe7b 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 8003ece:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003edc:	f040 810c 	bne.w	80040f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ee0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003eea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003eee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003ef2:	4622      	mov	r2, r4
 8003ef4:	462b      	mov	r3, r5
 8003ef6:	1891      	adds	r1, r2, r2
 8003ef8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003efa:	415b      	adcs	r3, r3
 8003efc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003efe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f02:	4621      	mov	r1, r4
 8003f04:	eb12 0801 	adds.w	r8, r2, r1
 8003f08:	4629      	mov	r1, r5
 8003f0a:	eb43 0901 	adc.w	r9, r3, r1
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	f04f 0300 	mov.w	r3, #0
 8003f16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f22:	4690      	mov	r8, r2
 8003f24:	4699      	mov	r9, r3
 8003f26:	4623      	mov	r3, r4
 8003f28:	eb18 0303 	adds.w	r3, r8, r3
 8003f2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f30:	462b      	mov	r3, r5
 8003f32:	eb49 0303 	adc.w	r3, r9, r3
 8003f36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f4e:	460b      	mov	r3, r1
 8003f50:	18db      	adds	r3, r3, r3
 8003f52:	653b      	str	r3, [r7, #80]	; 0x50
 8003f54:	4613      	mov	r3, r2
 8003f56:	eb42 0303 	adc.w	r3, r2, r3
 8003f5a:	657b      	str	r3, [r7, #84]	; 0x54
 8003f5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003f64:	f7fc f98c 	bl	8000280 <__aeabi_uldivmod>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4b61      	ldr	r3, [pc, #388]	; (80040f4 <UART_SetConfig+0x2d4>)
 8003f6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f72:	095b      	lsrs	r3, r3, #5
 8003f74:	011c      	lsls	r4, r3, #4
 8003f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003f84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003f88:	4642      	mov	r2, r8
 8003f8a:	464b      	mov	r3, r9
 8003f8c:	1891      	adds	r1, r2, r2
 8003f8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003f90:	415b      	adcs	r3, r3
 8003f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f98:	4641      	mov	r1, r8
 8003f9a:	eb12 0a01 	adds.w	sl, r2, r1
 8003f9e:	4649      	mov	r1, r9
 8003fa0:	eb43 0b01 	adc.w	fp, r3, r1
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	f04f 0300 	mov.w	r3, #0
 8003fac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fb8:	4692      	mov	sl, r2
 8003fba:	469b      	mov	fp, r3
 8003fbc:	4643      	mov	r3, r8
 8003fbe:	eb1a 0303 	adds.w	r3, sl, r3
 8003fc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fc6:	464b      	mov	r3, r9
 8003fc8:	eb4b 0303 	adc.w	r3, fp, r3
 8003fcc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fdc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003fe0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	18db      	adds	r3, r3, r3
 8003fe8:	643b      	str	r3, [r7, #64]	; 0x40
 8003fea:	4613      	mov	r3, r2
 8003fec:	eb42 0303 	adc.w	r3, r2, r3
 8003ff0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ff2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ff6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ffa:	f7fc f941 	bl	8000280 <__aeabi_uldivmod>
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	4611      	mov	r1, r2
 8004004:	4b3b      	ldr	r3, [pc, #236]	; (80040f4 <UART_SetConfig+0x2d4>)
 8004006:	fba3 2301 	umull	r2, r3, r3, r1
 800400a:	095b      	lsrs	r3, r3, #5
 800400c:	2264      	movs	r2, #100	; 0x64
 800400e:	fb02 f303 	mul.w	r3, r2, r3
 8004012:	1acb      	subs	r3, r1, r3
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800401a:	4b36      	ldr	r3, [pc, #216]	; (80040f4 <UART_SetConfig+0x2d4>)
 800401c:	fba3 2302 	umull	r2, r3, r3, r2
 8004020:	095b      	lsrs	r3, r3, #5
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004028:	441c      	add	r4, r3
 800402a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800402e:	2200      	movs	r2, #0
 8004030:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004034:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004038:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800403c:	4642      	mov	r2, r8
 800403e:	464b      	mov	r3, r9
 8004040:	1891      	adds	r1, r2, r2
 8004042:	63b9      	str	r1, [r7, #56]	; 0x38
 8004044:	415b      	adcs	r3, r3
 8004046:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004048:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800404c:	4641      	mov	r1, r8
 800404e:	1851      	adds	r1, r2, r1
 8004050:	6339      	str	r1, [r7, #48]	; 0x30
 8004052:	4649      	mov	r1, r9
 8004054:	414b      	adcs	r3, r1
 8004056:	637b      	str	r3, [r7, #52]	; 0x34
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004064:	4659      	mov	r1, fp
 8004066:	00cb      	lsls	r3, r1, #3
 8004068:	4651      	mov	r1, sl
 800406a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800406e:	4651      	mov	r1, sl
 8004070:	00ca      	lsls	r2, r1, #3
 8004072:	4610      	mov	r0, r2
 8004074:	4619      	mov	r1, r3
 8004076:	4603      	mov	r3, r0
 8004078:	4642      	mov	r2, r8
 800407a:	189b      	adds	r3, r3, r2
 800407c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004080:	464b      	mov	r3, r9
 8004082:	460a      	mov	r2, r1
 8004084:	eb42 0303 	adc.w	r3, r2, r3
 8004088:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800408c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004098:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800409c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040a0:	460b      	mov	r3, r1
 80040a2:	18db      	adds	r3, r3, r3
 80040a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80040a6:	4613      	mov	r3, r2
 80040a8:	eb42 0303 	adc.w	r3, r2, r3
 80040ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80040b6:	f7fc f8e3 	bl	8000280 <__aeabi_uldivmod>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	4b0d      	ldr	r3, [pc, #52]	; (80040f4 <UART_SetConfig+0x2d4>)
 80040c0:	fba3 1302 	umull	r1, r3, r3, r2
 80040c4:	095b      	lsrs	r3, r3, #5
 80040c6:	2164      	movs	r1, #100	; 0x64
 80040c8:	fb01 f303 	mul.w	r3, r1, r3
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	3332      	adds	r3, #50	; 0x32
 80040d2:	4a08      	ldr	r2, [pc, #32]	; (80040f4 <UART_SetConfig+0x2d4>)
 80040d4:	fba2 2303 	umull	r2, r3, r2, r3
 80040d8:	095b      	lsrs	r3, r3, #5
 80040da:	f003 0207 	and.w	r2, r3, #7
 80040de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4422      	add	r2, r4
 80040e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040e8:	e106      	b.n	80042f8 <UART_SetConfig+0x4d8>
 80040ea:	bf00      	nop
 80040ec:	40011000 	.word	0x40011000
 80040f0:	40011400 	.word	0x40011400
 80040f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040fc:	2200      	movs	r2, #0
 80040fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004102:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004106:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800410a:	4642      	mov	r2, r8
 800410c:	464b      	mov	r3, r9
 800410e:	1891      	adds	r1, r2, r2
 8004110:	6239      	str	r1, [r7, #32]
 8004112:	415b      	adcs	r3, r3
 8004114:	627b      	str	r3, [r7, #36]	; 0x24
 8004116:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800411a:	4641      	mov	r1, r8
 800411c:	1854      	adds	r4, r2, r1
 800411e:	4649      	mov	r1, r9
 8004120:	eb43 0501 	adc.w	r5, r3, r1
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	00eb      	lsls	r3, r5, #3
 800412e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004132:	00e2      	lsls	r2, r4, #3
 8004134:	4614      	mov	r4, r2
 8004136:	461d      	mov	r5, r3
 8004138:	4643      	mov	r3, r8
 800413a:	18e3      	adds	r3, r4, r3
 800413c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004140:	464b      	mov	r3, r9
 8004142:	eb45 0303 	adc.w	r3, r5, r3
 8004146:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800414a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004156:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004166:	4629      	mov	r1, r5
 8004168:	008b      	lsls	r3, r1, #2
 800416a:	4621      	mov	r1, r4
 800416c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004170:	4621      	mov	r1, r4
 8004172:	008a      	lsls	r2, r1, #2
 8004174:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004178:	f7fc f882 	bl	8000280 <__aeabi_uldivmod>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4b60      	ldr	r3, [pc, #384]	; (8004304 <UART_SetConfig+0x4e4>)
 8004182:	fba3 2302 	umull	r2, r3, r3, r2
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	011c      	lsls	r4, r3, #4
 800418a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800418e:	2200      	movs	r2, #0
 8004190:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004194:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004198:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800419c:	4642      	mov	r2, r8
 800419e:	464b      	mov	r3, r9
 80041a0:	1891      	adds	r1, r2, r2
 80041a2:	61b9      	str	r1, [r7, #24]
 80041a4:	415b      	adcs	r3, r3
 80041a6:	61fb      	str	r3, [r7, #28]
 80041a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041ac:	4641      	mov	r1, r8
 80041ae:	1851      	adds	r1, r2, r1
 80041b0:	6139      	str	r1, [r7, #16]
 80041b2:	4649      	mov	r1, r9
 80041b4:	414b      	adcs	r3, r1
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	f04f 0300 	mov.w	r3, #0
 80041c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041c4:	4659      	mov	r1, fp
 80041c6:	00cb      	lsls	r3, r1, #3
 80041c8:	4651      	mov	r1, sl
 80041ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041ce:	4651      	mov	r1, sl
 80041d0:	00ca      	lsls	r2, r1, #3
 80041d2:	4610      	mov	r0, r2
 80041d4:	4619      	mov	r1, r3
 80041d6:	4603      	mov	r3, r0
 80041d8:	4642      	mov	r2, r8
 80041da:	189b      	adds	r3, r3, r2
 80041dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041e0:	464b      	mov	r3, r9
 80041e2:	460a      	mov	r2, r1
 80041e4:	eb42 0303 	adc.w	r3, r2, r3
 80041e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80041f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	f04f 0300 	mov.w	r3, #0
 8004200:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004204:	4649      	mov	r1, r9
 8004206:	008b      	lsls	r3, r1, #2
 8004208:	4641      	mov	r1, r8
 800420a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800420e:	4641      	mov	r1, r8
 8004210:	008a      	lsls	r2, r1, #2
 8004212:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004216:	f7fc f833 	bl	8000280 <__aeabi_uldivmod>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	4611      	mov	r1, r2
 8004220:	4b38      	ldr	r3, [pc, #224]	; (8004304 <UART_SetConfig+0x4e4>)
 8004222:	fba3 2301 	umull	r2, r3, r3, r1
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	2264      	movs	r2, #100	; 0x64
 800422a:	fb02 f303 	mul.w	r3, r2, r3
 800422e:	1acb      	subs	r3, r1, r3
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	3332      	adds	r3, #50	; 0x32
 8004234:	4a33      	ldr	r2, [pc, #204]	; (8004304 <UART_SetConfig+0x4e4>)
 8004236:	fba2 2303 	umull	r2, r3, r2, r3
 800423a:	095b      	lsrs	r3, r3, #5
 800423c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004240:	441c      	add	r4, r3
 8004242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004246:	2200      	movs	r2, #0
 8004248:	673b      	str	r3, [r7, #112]	; 0x70
 800424a:	677a      	str	r2, [r7, #116]	; 0x74
 800424c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004250:	4642      	mov	r2, r8
 8004252:	464b      	mov	r3, r9
 8004254:	1891      	adds	r1, r2, r2
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	415b      	adcs	r3, r3
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004260:	4641      	mov	r1, r8
 8004262:	1851      	adds	r1, r2, r1
 8004264:	6039      	str	r1, [r7, #0]
 8004266:	4649      	mov	r1, r9
 8004268:	414b      	adcs	r3, r1
 800426a:	607b      	str	r3, [r7, #4]
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	f04f 0300 	mov.w	r3, #0
 8004274:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004278:	4659      	mov	r1, fp
 800427a:	00cb      	lsls	r3, r1, #3
 800427c:	4651      	mov	r1, sl
 800427e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004282:	4651      	mov	r1, sl
 8004284:	00ca      	lsls	r2, r1, #3
 8004286:	4610      	mov	r0, r2
 8004288:	4619      	mov	r1, r3
 800428a:	4603      	mov	r3, r0
 800428c:	4642      	mov	r2, r8
 800428e:	189b      	adds	r3, r3, r2
 8004290:	66bb      	str	r3, [r7, #104]	; 0x68
 8004292:	464b      	mov	r3, r9
 8004294:	460a      	mov	r2, r1
 8004296:	eb42 0303 	adc.w	r3, r2, r3
 800429a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	663b      	str	r3, [r7, #96]	; 0x60
 80042a6:	667a      	str	r2, [r7, #100]	; 0x64
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80042b4:	4649      	mov	r1, r9
 80042b6:	008b      	lsls	r3, r1, #2
 80042b8:	4641      	mov	r1, r8
 80042ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042be:	4641      	mov	r1, r8
 80042c0:	008a      	lsls	r2, r1, #2
 80042c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80042c6:	f7fb ffdb 	bl	8000280 <__aeabi_uldivmod>
 80042ca:	4602      	mov	r2, r0
 80042cc:	460b      	mov	r3, r1
 80042ce:	4b0d      	ldr	r3, [pc, #52]	; (8004304 <UART_SetConfig+0x4e4>)
 80042d0:	fba3 1302 	umull	r1, r3, r3, r2
 80042d4:	095b      	lsrs	r3, r3, #5
 80042d6:	2164      	movs	r1, #100	; 0x64
 80042d8:	fb01 f303 	mul.w	r3, r1, r3
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	3332      	adds	r3, #50	; 0x32
 80042e2:	4a08      	ldr	r2, [pc, #32]	; (8004304 <UART_SetConfig+0x4e4>)
 80042e4:	fba2 2303 	umull	r2, r3, r2, r3
 80042e8:	095b      	lsrs	r3, r3, #5
 80042ea:	f003 020f 	and.w	r2, r3, #15
 80042ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4422      	add	r2, r4
 80042f6:	609a      	str	r2, [r3, #8]
}
 80042f8:	bf00      	nop
 80042fa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80042fe:	46bd      	mov	sp, r7
 8004300:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004304:	51eb851f 	.word	0x51eb851f

08004308 <siprintf>:
 8004308:	b40e      	push	{r1, r2, r3}
 800430a:	b500      	push	{lr}
 800430c:	b09c      	sub	sp, #112	; 0x70
 800430e:	ab1d      	add	r3, sp, #116	; 0x74
 8004310:	9002      	str	r0, [sp, #8]
 8004312:	9006      	str	r0, [sp, #24]
 8004314:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004318:	4809      	ldr	r0, [pc, #36]	; (8004340 <siprintf+0x38>)
 800431a:	9107      	str	r1, [sp, #28]
 800431c:	9104      	str	r1, [sp, #16]
 800431e:	4909      	ldr	r1, [pc, #36]	; (8004344 <siprintf+0x3c>)
 8004320:	f853 2b04 	ldr.w	r2, [r3], #4
 8004324:	9105      	str	r1, [sp, #20]
 8004326:	6800      	ldr	r0, [r0, #0]
 8004328:	9301      	str	r3, [sp, #4]
 800432a:	a902      	add	r1, sp, #8
 800432c:	f000 f992 	bl	8004654 <_svfiprintf_r>
 8004330:	9b02      	ldr	r3, [sp, #8]
 8004332:	2200      	movs	r2, #0
 8004334:	701a      	strb	r2, [r3, #0]
 8004336:	b01c      	add	sp, #112	; 0x70
 8004338:	f85d eb04 	ldr.w	lr, [sp], #4
 800433c:	b003      	add	sp, #12
 800433e:	4770      	bx	lr
 8004340:	20000058 	.word	0x20000058
 8004344:	ffff0208 	.word	0xffff0208

08004348 <memset>:
 8004348:	4402      	add	r2, r0
 800434a:	4603      	mov	r3, r0
 800434c:	4293      	cmp	r3, r2
 800434e:	d100      	bne.n	8004352 <memset+0xa>
 8004350:	4770      	bx	lr
 8004352:	f803 1b01 	strb.w	r1, [r3], #1
 8004356:	e7f9      	b.n	800434c <memset+0x4>

08004358 <__errno>:
 8004358:	4b01      	ldr	r3, [pc, #4]	; (8004360 <__errno+0x8>)
 800435a:	6818      	ldr	r0, [r3, #0]
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	20000058 	.word	0x20000058

08004364 <__libc_init_array>:
 8004364:	b570      	push	{r4, r5, r6, lr}
 8004366:	4d0d      	ldr	r5, [pc, #52]	; (800439c <__libc_init_array+0x38>)
 8004368:	4c0d      	ldr	r4, [pc, #52]	; (80043a0 <__libc_init_array+0x3c>)
 800436a:	1b64      	subs	r4, r4, r5
 800436c:	10a4      	asrs	r4, r4, #2
 800436e:	2600      	movs	r6, #0
 8004370:	42a6      	cmp	r6, r4
 8004372:	d109      	bne.n	8004388 <__libc_init_array+0x24>
 8004374:	4d0b      	ldr	r5, [pc, #44]	; (80043a4 <__libc_init_array+0x40>)
 8004376:	4c0c      	ldr	r4, [pc, #48]	; (80043a8 <__libc_init_array+0x44>)
 8004378:	f000 fc6a 	bl	8004c50 <_init>
 800437c:	1b64      	subs	r4, r4, r5
 800437e:	10a4      	asrs	r4, r4, #2
 8004380:	2600      	movs	r6, #0
 8004382:	42a6      	cmp	r6, r4
 8004384:	d105      	bne.n	8004392 <__libc_init_array+0x2e>
 8004386:	bd70      	pop	{r4, r5, r6, pc}
 8004388:	f855 3b04 	ldr.w	r3, [r5], #4
 800438c:	4798      	blx	r3
 800438e:	3601      	adds	r6, #1
 8004390:	e7ee      	b.n	8004370 <__libc_init_array+0xc>
 8004392:	f855 3b04 	ldr.w	r3, [r5], #4
 8004396:	4798      	blx	r3
 8004398:	3601      	adds	r6, #1
 800439a:	e7f2      	b.n	8004382 <__libc_init_array+0x1e>
 800439c:	08004d34 	.word	0x08004d34
 80043a0:	08004d34 	.word	0x08004d34
 80043a4:	08004d34 	.word	0x08004d34
 80043a8:	08004d38 	.word	0x08004d38

080043ac <__retarget_lock_acquire_recursive>:
 80043ac:	4770      	bx	lr

080043ae <__retarget_lock_release_recursive>:
 80043ae:	4770      	bx	lr

080043b0 <_free_r>:
 80043b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043b2:	2900      	cmp	r1, #0
 80043b4:	d044      	beq.n	8004440 <_free_r+0x90>
 80043b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043ba:	9001      	str	r0, [sp, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f1a1 0404 	sub.w	r4, r1, #4
 80043c2:	bfb8      	it	lt
 80043c4:	18e4      	addlt	r4, r4, r3
 80043c6:	f000 f8df 	bl	8004588 <__malloc_lock>
 80043ca:	4a1e      	ldr	r2, [pc, #120]	; (8004444 <_free_r+0x94>)
 80043cc:	9801      	ldr	r0, [sp, #4]
 80043ce:	6813      	ldr	r3, [r2, #0]
 80043d0:	b933      	cbnz	r3, 80043e0 <_free_r+0x30>
 80043d2:	6063      	str	r3, [r4, #4]
 80043d4:	6014      	str	r4, [r2, #0]
 80043d6:	b003      	add	sp, #12
 80043d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043dc:	f000 b8da 	b.w	8004594 <__malloc_unlock>
 80043e0:	42a3      	cmp	r3, r4
 80043e2:	d908      	bls.n	80043f6 <_free_r+0x46>
 80043e4:	6825      	ldr	r5, [r4, #0]
 80043e6:	1961      	adds	r1, r4, r5
 80043e8:	428b      	cmp	r3, r1
 80043ea:	bf01      	itttt	eq
 80043ec:	6819      	ldreq	r1, [r3, #0]
 80043ee:	685b      	ldreq	r3, [r3, #4]
 80043f0:	1949      	addeq	r1, r1, r5
 80043f2:	6021      	streq	r1, [r4, #0]
 80043f4:	e7ed      	b.n	80043d2 <_free_r+0x22>
 80043f6:	461a      	mov	r2, r3
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	b10b      	cbz	r3, 8004400 <_free_r+0x50>
 80043fc:	42a3      	cmp	r3, r4
 80043fe:	d9fa      	bls.n	80043f6 <_free_r+0x46>
 8004400:	6811      	ldr	r1, [r2, #0]
 8004402:	1855      	adds	r5, r2, r1
 8004404:	42a5      	cmp	r5, r4
 8004406:	d10b      	bne.n	8004420 <_free_r+0x70>
 8004408:	6824      	ldr	r4, [r4, #0]
 800440a:	4421      	add	r1, r4
 800440c:	1854      	adds	r4, r2, r1
 800440e:	42a3      	cmp	r3, r4
 8004410:	6011      	str	r1, [r2, #0]
 8004412:	d1e0      	bne.n	80043d6 <_free_r+0x26>
 8004414:	681c      	ldr	r4, [r3, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	6053      	str	r3, [r2, #4]
 800441a:	440c      	add	r4, r1
 800441c:	6014      	str	r4, [r2, #0]
 800441e:	e7da      	b.n	80043d6 <_free_r+0x26>
 8004420:	d902      	bls.n	8004428 <_free_r+0x78>
 8004422:	230c      	movs	r3, #12
 8004424:	6003      	str	r3, [r0, #0]
 8004426:	e7d6      	b.n	80043d6 <_free_r+0x26>
 8004428:	6825      	ldr	r5, [r4, #0]
 800442a:	1961      	adds	r1, r4, r5
 800442c:	428b      	cmp	r3, r1
 800442e:	bf04      	itt	eq
 8004430:	6819      	ldreq	r1, [r3, #0]
 8004432:	685b      	ldreq	r3, [r3, #4]
 8004434:	6063      	str	r3, [r4, #4]
 8004436:	bf04      	itt	eq
 8004438:	1949      	addeq	r1, r1, r5
 800443a:	6021      	streq	r1, [r4, #0]
 800443c:	6054      	str	r4, [r2, #4]
 800443e:	e7ca      	b.n	80043d6 <_free_r+0x26>
 8004440:	b003      	add	sp, #12
 8004442:	bd30      	pop	{r4, r5, pc}
 8004444:	200002cc 	.word	0x200002cc

08004448 <sbrk_aligned>:
 8004448:	b570      	push	{r4, r5, r6, lr}
 800444a:	4e0e      	ldr	r6, [pc, #56]	; (8004484 <sbrk_aligned+0x3c>)
 800444c:	460c      	mov	r4, r1
 800444e:	6831      	ldr	r1, [r6, #0]
 8004450:	4605      	mov	r5, r0
 8004452:	b911      	cbnz	r1, 800445a <sbrk_aligned+0x12>
 8004454:	f000 fba6 	bl	8004ba4 <_sbrk_r>
 8004458:	6030      	str	r0, [r6, #0]
 800445a:	4621      	mov	r1, r4
 800445c:	4628      	mov	r0, r5
 800445e:	f000 fba1 	bl	8004ba4 <_sbrk_r>
 8004462:	1c43      	adds	r3, r0, #1
 8004464:	d00a      	beq.n	800447c <sbrk_aligned+0x34>
 8004466:	1cc4      	adds	r4, r0, #3
 8004468:	f024 0403 	bic.w	r4, r4, #3
 800446c:	42a0      	cmp	r0, r4
 800446e:	d007      	beq.n	8004480 <sbrk_aligned+0x38>
 8004470:	1a21      	subs	r1, r4, r0
 8004472:	4628      	mov	r0, r5
 8004474:	f000 fb96 	bl	8004ba4 <_sbrk_r>
 8004478:	3001      	adds	r0, #1
 800447a:	d101      	bne.n	8004480 <sbrk_aligned+0x38>
 800447c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004480:	4620      	mov	r0, r4
 8004482:	bd70      	pop	{r4, r5, r6, pc}
 8004484:	200002d0 	.word	0x200002d0

08004488 <_malloc_r>:
 8004488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800448c:	1ccd      	adds	r5, r1, #3
 800448e:	f025 0503 	bic.w	r5, r5, #3
 8004492:	3508      	adds	r5, #8
 8004494:	2d0c      	cmp	r5, #12
 8004496:	bf38      	it	cc
 8004498:	250c      	movcc	r5, #12
 800449a:	2d00      	cmp	r5, #0
 800449c:	4607      	mov	r7, r0
 800449e:	db01      	blt.n	80044a4 <_malloc_r+0x1c>
 80044a0:	42a9      	cmp	r1, r5
 80044a2:	d905      	bls.n	80044b0 <_malloc_r+0x28>
 80044a4:	230c      	movs	r3, #12
 80044a6:	603b      	str	r3, [r7, #0]
 80044a8:	2600      	movs	r6, #0
 80044aa:	4630      	mov	r0, r6
 80044ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004584 <_malloc_r+0xfc>
 80044b4:	f000 f868 	bl	8004588 <__malloc_lock>
 80044b8:	f8d8 3000 	ldr.w	r3, [r8]
 80044bc:	461c      	mov	r4, r3
 80044be:	bb5c      	cbnz	r4, 8004518 <_malloc_r+0x90>
 80044c0:	4629      	mov	r1, r5
 80044c2:	4638      	mov	r0, r7
 80044c4:	f7ff ffc0 	bl	8004448 <sbrk_aligned>
 80044c8:	1c43      	adds	r3, r0, #1
 80044ca:	4604      	mov	r4, r0
 80044cc:	d155      	bne.n	800457a <_malloc_r+0xf2>
 80044ce:	f8d8 4000 	ldr.w	r4, [r8]
 80044d2:	4626      	mov	r6, r4
 80044d4:	2e00      	cmp	r6, #0
 80044d6:	d145      	bne.n	8004564 <_malloc_r+0xdc>
 80044d8:	2c00      	cmp	r4, #0
 80044da:	d048      	beq.n	800456e <_malloc_r+0xe6>
 80044dc:	6823      	ldr	r3, [r4, #0]
 80044de:	4631      	mov	r1, r6
 80044e0:	4638      	mov	r0, r7
 80044e2:	eb04 0903 	add.w	r9, r4, r3
 80044e6:	f000 fb5d 	bl	8004ba4 <_sbrk_r>
 80044ea:	4581      	cmp	r9, r0
 80044ec:	d13f      	bne.n	800456e <_malloc_r+0xe6>
 80044ee:	6821      	ldr	r1, [r4, #0]
 80044f0:	1a6d      	subs	r5, r5, r1
 80044f2:	4629      	mov	r1, r5
 80044f4:	4638      	mov	r0, r7
 80044f6:	f7ff ffa7 	bl	8004448 <sbrk_aligned>
 80044fa:	3001      	adds	r0, #1
 80044fc:	d037      	beq.n	800456e <_malloc_r+0xe6>
 80044fe:	6823      	ldr	r3, [r4, #0]
 8004500:	442b      	add	r3, r5
 8004502:	6023      	str	r3, [r4, #0]
 8004504:	f8d8 3000 	ldr.w	r3, [r8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d038      	beq.n	800457e <_malloc_r+0xf6>
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	42a2      	cmp	r2, r4
 8004510:	d12b      	bne.n	800456a <_malloc_r+0xe2>
 8004512:	2200      	movs	r2, #0
 8004514:	605a      	str	r2, [r3, #4]
 8004516:	e00f      	b.n	8004538 <_malloc_r+0xb0>
 8004518:	6822      	ldr	r2, [r4, #0]
 800451a:	1b52      	subs	r2, r2, r5
 800451c:	d41f      	bmi.n	800455e <_malloc_r+0xd6>
 800451e:	2a0b      	cmp	r2, #11
 8004520:	d917      	bls.n	8004552 <_malloc_r+0xca>
 8004522:	1961      	adds	r1, r4, r5
 8004524:	42a3      	cmp	r3, r4
 8004526:	6025      	str	r5, [r4, #0]
 8004528:	bf18      	it	ne
 800452a:	6059      	strne	r1, [r3, #4]
 800452c:	6863      	ldr	r3, [r4, #4]
 800452e:	bf08      	it	eq
 8004530:	f8c8 1000 	streq.w	r1, [r8]
 8004534:	5162      	str	r2, [r4, r5]
 8004536:	604b      	str	r3, [r1, #4]
 8004538:	4638      	mov	r0, r7
 800453a:	f104 060b 	add.w	r6, r4, #11
 800453e:	f000 f829 	bl	8004594 <__malloc_unlock>
 8004542:	f026 0607 	bic.w	r6, r6, #7
 8004546:	1d23      	adds	r3, r4, #4
 8004548:	1af2      	subs	r2, r6, r3
 800454a:	d0ae      	beq.n	80044aa <_malloc_r+0x22>
 800454c:	1b9b      	subs	r3, r3, r6
 800454e:	50a3      	str	r3, [r4, r2]
 8004550:	e7ab      	b.n	80044aa <_malloc_r+0x22>
 8004552:	42a3      	cmp	r3, r4
 8004554:	6862      	ldr	r2, [r4, #4]
 8004556:	d1dd      	bne.n	8004514 <_malloc_r+0x8c>
 8004558:	f8c8 2000 	str.w	r2, [r8]
 800455c:	e7ec      	b.n	8004538 <_malloc_r+0xb0>
 800455e:	4623      	mov	r3, r4
 8004560:	6864      	ldr	r4, [r4, #4]
 8004562:	e7ac      	b.n	80044be <_malloc_r+0x36>
 8004564:	4634      	mov	r4, r6
 8004566:	6876      	ldr	r6, [r6, #4]
 8004568:	e7b4      	b.n	80044d4 <_malloc_r+0x4c>
 800456a:	4613      	mov	r3, r2
 800456c:	e7cc      	b.n	8004508 <_malloc_r+0x80>
 800456e:	230c      	movs	r3, #12
 8004570:	603b      	str	r3, [r7, #0]
 8004572:	4638      	mov	r0, r7
 8004574:	f000 f80e 	bl	8004594 <__malloc_unlock>
 8004578:	e797      	b.n	80044aa <_malloc_r+0x22>
 800457a:	6025      	str	r5, [r4, #0]
 800457c:	e7dc      	b.n	8004538 <_malloc_r+0xb0>
 800457e:	605b      	str	r3, [r3, #4]
 8004580:	deff      	udf	#255	; 0xff
 8004582:	bf00      	nop
 8004584:	200002cc 	.word	0x200002cc

08004588 <__malloc_lock>:
 8004588:	4801      	ldr	r0, [pc, #4]	; (8004590 <__malloc_lock+0x8>)
 800458a:	f7ff bf0f 	b.w	80043ac <__retarget_lock_acquire_recursive>
 800458e:	bf00      	nop
 8004590:	200002c8 	.word	0x200002c8

08004594 <__malloc_unlock>:
 8004594:	4801      	ldr	r0, [pc, #4]	; (800459c <__malloc_unlock+0x8>)
 8004596:	f7ff bf0a 	b.w	80043ae <__retarget_lock_release_recursive>
 800459a:	bf00      	nop
 800459c:	200002c8 	.word	0x200002c8

080045a0 <__ssputs_r>:
 80045a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045a4:	688e      	ldr	r6, [r1, #8]
 80045a6:	461f      	mov	r7, r3
 80045a8:	42be      	cmp	r6, r7
 80045aa:	680b      	ldr	r3, [r1, #0]
 80045ac:	4682      	mov	sl, r0
 80045ae:	460c      	mov	r4, r1
 80045b0:	4690      	mov	r8, r2
 80045b2:	d82c      	bhi.n	800460e <__ssputs_r+0x6e>
 80045b4:	898a      	ldrh	r2, [r1, #12]
 80045b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80045ba:	d026      	beq.n	800460a <__ssputs_r+0x6a>
 80045bc:	6965      	ldr	r5, [r4, #20]
 80045be:	6909      	ldr	r1, [r1, #16]
 80045c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045c4:	eba3 0901 	sub.w	r9, r3, r1
 80045c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045cc:	1c7b      	adds	r3, r7, #1
 80045ce:	444b      	add	r3, r9
 80045d0:	106d      	asrs	r5, r5, #1
 80045d2:	429d      	cmp	r5, r3
 80045d4:	bf38      	it	cc
 80045d6:	461d      	movcc	r5, r3
 80045d8:	0553      	lsls	r3, r2, #21
 80045da:	d527      	bpl.n	800462c <__ssputs_r+0x8c>
 80045dc:	4629      	mov	r1, r5
 80045de:	f7ff ff53 	bl	8004488 <_malloc_r>
 80045e2:	4606      	mov	r6, r0
 80045e4:	b360      	cbz	r0, 8004640 <__ssputs_r+0xa0>
 80045e6:	6921      	ldr	r1, [r4, #16]
 80045e8:	464a      	mov	r2, r9
 80045ea:	f000 faeb 	bl	8004bc4 <memcpy>
 80045ee:	89a3      	ldrh	r3, [r4, #12]
 80045f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80045f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045f8:	81a3      	strh	r3, [r4, #12]
 80045fa:	6126      	str	r6, [r4, #16]
 80045fc:	6165      	str	r5, [r4, #20]
 80045fe:	444e      	add	r6, r9
 8004600:	eba5 0509 	sub.w	r5, r5, r9
 8004604:	6026      	str	r6, [r4, #0]
 8004606:	60a5      	str	r5, [r4, #8]
 8004608:	463e      	mov	r6, r7
 800460a:	42be      	cmp	r6, r7
 800460c:	d900      	bls.n	8004610 <__ssputs_r+0x70>
 800460e:	463e      	mov	r6, r7
 8004610:	6820      	ldr	r0, [r4, #0]
 8004612:	4632      	mov	r2, r6
 8004614:	4641      	mov	r1, r8
 8004616:	f000 faab 	bl	8004b70 <memmove>
 800461a:	68a3      	ldr	r3, [r4, #8]
 800461c:	1b9b      	subs	r3, r3, r6
 800461e:	60a3      	str	r3, [r4, #8]
 8004620:	6823      	ldr	r3, [r4, #0]
 8004622:	4433      	add	r3, r6
 8004624:	6023      	str	r3, [r4, #0]
 8004626:	2000      	movs	r0, #0
 8004628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800462c:	462a      	mov	r2, r5
 800462e:	f000 fad7 	bl	8004be0 <_realloc_r>
 8004632:	4606      	mov	r6, r0
 8004634:	2800      	cmp	r0, #0
 8004636:	d1e0      	bne.n	80045fa <__ssputs_r+0x5a>
 8004638:	6921      	ldr	r1, [r4, #16]
 800463a:	4650      	mov	r0, sl
 800463c:	f7ff feb8 	bl	80043b0 <_free_r>
 8004640:	230c      	movs	r3, #12
 8004642:	f8ca 3000 	str.w	r3, [sl]
 8004646:	89a3      	ldrh	r3, [r4, #12]
 8004648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800464c:	81a3      	strh	r3, [r4, #12]
 800464e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004652:	e7e9      	b.n	8004628 <__ssputs_r+0x88>

08004654 <_svfiprintf_r>:
 8004654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004658:	4698      	mov	r8, r3
 800465a:	898b      	ldrh	r3, [r1, #12]
 800465c:	061b      	lsls	r3, r3, #24
 800465e:	b09d      	sub	sp, #116	; 0x74
 8004660:	4607      	mov	r7, r0
 8004662:	460d      	mov	r5, r1
 8004664:	4614      	mov	r4, r2
 8004666:	d50e      	bpl.n	8004686 <_svfiprintf_r+0x32>
 8004668:	690b      	ldr	r3, [r1, #16]
 800466a:	b963      	cbnz	r3, 8004686 <_svfiprintf_r+0x32>
 800466c:	2140      	movs	r1, #64	; 0x40
 800466e:	f7ff ff0b 	bl	8004488 <_malloc_r>
 8004672:	6028      	str	r0, [r5, #0]
 8004674:	6128      	str	r0, [r5, #16]
 8004676:	b920      	cbnz	r0, 8004682 <_svfiprintf_r+0x2e>
 8004678:	230c      	movs	r3, #12
 800467a:	603b      	str	r3, [r7, #0]
 800467c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004680:	e0d0      	b.n	8004824 <_svfiprintf_r+0x1d0>
 8004682:	2340      	movs	r3, #64	; 0x40
 8004684:	616b      	str	r3, [r5, #20]
 8004686:	2300      	movs	r3, #0
 8004688:	9309      	str	r3, [sp, #36]	; 0x24
 800468a:	2320      	movs	r3, #32
 800468c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004690:	f8cd 800c 	str.w	r8, [sp, #12]
 8004694:	2330      	movs	r3, #48	; 0x30
 8004696:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800483c <_svfiprintf_r+0x1e8>
 800469a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800469e:	f04f 0901 	mov.w	r9, #1
 80046a2:	4623      	mov	r3, r4
 80046a4:	469a      	mov	sl, r3
 80046a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046aa:	b10a      	cbz	r2, 80046b0 <_svfiprintf_r+0x5c>
 80046ac:	2a25      	cmp	r2, #37	; 0x25
 80046ae:	d1f9      	bne.n	80046a4 <_svfiprintf_r+0x50>
 80046b0:	ebba 0b04 	subs.w	fp, sl, r4
 80046b4:	d00b      	beq.n	80046ce <_svfiprintf_r+0x7a>
 80046b6:	465b      	mov	r3, fp
 80046b8:	4622      	mov	r2, r4
 80046ba:	4629      	mov	r1, r5
 80046bc:	4638      	mov	r0, r7
 80046be:	f7ff ff6f 	bl	80045a0 <__ssputs_r>
 80046c2:	3001      	adds	r0, #1
 80046c4:	f000 80a9 	beq.w	800481a <_svfiprintf_r+0x1c6>
 80046c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046ca:	445a      	add	r2, fp
 80046cc:	9209      	str	r2, [sp, #36]	; 0x24
 80046ce:	f89a 3000 	ldrb.w	r3, [sl]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 80a1 	beq.w	800481a <_svfiprintf_r+0x1c6>
 80046d8:	2300      	movs	r3, #0
 80046da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046e2:	f10a 0a01 	add.w	sl, sl, #1
 80046e6:	9304      	str	r3, [sp, #16]
 80046e8:	9307      	str	r3, [sp, #28]
 80046ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046ee:	931a      	str	r3, [sp, #104]	; 0x68
 80046f0:	4654      	mov	r4, sl
 80046f2:	2205      	movs	r2, #5
 80046f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046f8:	4850      	ldr	r0, [pc, #320]	; (800483c <_svfiprintf_r+0x1e8>)
 80046fa:	f7fb fd71 	bl	80001e0 <memchr>
 80046fe:	9a04      	ldr	r2, [sp, #16]
 8004700:	b9d8      	cbnz	r0, 800473a <_svfiprintf_r+0xe6>
 8004702:	06d0      	lsls	r0, r2, #27
 8004704:	bf44      	itt	mi
 8004706:	2320      	movmi	r3, #32
 8004708:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800470c:	0711      	lsls	r1, r2, #28
 800470e:	bf44      	itt	mi
 8004710:	232b      	movmi	r3, #43	; 0x2b
 8004712:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004716:	f89a 3000 	ldrb.w	r3, [sl]
 800471a:	2b2a      	cmp	r3, #42	; 0x2a
 800471c:	d015      	beq.n	800474a <_svfiprintf_r+0xf6>
 800471e:	9a07      	ldr	r2, [sp, #28]
 8004720:	4654      	mov	r4, sl
 8004722:	2000      	movs	r0, #0
 8004724:	f04f 0c0a 	mov.w	ip, #10
 8004728:	4621      	mov	r1, r4
 800472a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800472e:	3b30      	subs	r3, #48	; 0x30
 8004730:	2b09      	cmp	r3, #9
 8004732:	d94d      	bls.n	80047d0 <_svfiprintf_r+0x17c>
 8004734:	b1b0      	cbz	r0, 8004764 <_svfiprintf_r+0x110>
 8004736:	9207      	str	r2, [sp, #28]
 8004738:	e014      	b.n	8004764 <_svfiprintf_r+0x110>
 800473a:	eba0 0308 	sub.w	r3, r0, r8
 800473e:	fa09 f303 	lsl.w	r3, r9, r3
 8004742:	4313      	orrs	r3, r2
 8004744:	9304      	str	r3, [sp, #16]
 8004746:	46a2      	mov	sl, r4
 8004748:	e7d2      	b.n	80046f0 <_svfiprintf_r+0x9c>
 800474a:	9b03      	ldr	r3, [sp, #12]
 800474c:	1d19      	adds	r1, r3, #4
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	9103      	str	r1, [sp, #12]
 8004752:	2b00      	cmp	r3, #0
 8004754:	bfbb      	ittet	lt
 8004756:	425b      	neglt	r3, r3
 8004758:	f042 0202 	orrlt.w	r2, r2, #2
 800475c:	9307      	strge	r3, [sp, #28]
 800475e:	9307      	strlt	r3, [sp, #28]
 8004760:	bfb8      	it	lt
 8004762:	9204      	strlt	r2, [sp, #16]
 8004764:	7823      	ldrb	r3, [r4, #0]
 8004766:	2b2e      	cmp	r3, #46	; 0x2e
 8004768:	d10c      	bne.n	8004784 <_svfiprintf_r+0x130>
 800476a:	7863      	ldrb	r3, [r4, #1]
 800476c:	2b2a      	cmp	r3, #42	; 0x2a
 800476e:	d134      	bne.n	80047da <_svfiprintf_r+0x186>
 8004770:	9b03      	ldr	r3, [sp, #12]
 8004772:	1d1a      	adds	r2, r3, #4
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	9203      	str	r2, [sp, #12]
 8004778:	2b00      	cmp	r3, #0
 800477a:	bfb8      	it	lt
 800477c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004780:	3402      	adds	r4, #2
 8004782:	9305      	str	r3, [sp, #20]
 8004784:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800484c <_svfiprintf_r+0x1f8>
 8004788:	7821      	ldrb	r1, [r4, #0]
 800478a:	2203      	movs	r2, #3
 800478c:	4650      	mov	r0, sl
 800478e:	f7fb fd27 	bl	80001e0 <memchr>
 8004792:	b138      	cbz	r0, 80047a4 <_svfiprintf_r+0x150>
 8004794:	9b04      	ldr	r3, [sp, #16]
 8004796:	eba0 000a 	sub.w	r0, r0, sl
 800479a:	2240      	movs	r2, #64	; 0x40
 800479c:	4082      	lsls	r2, r0
 800479e:	4313      	orrs	r3, r2
 80047a0:	3401      	adds	r4, #1
 80047a2:	9304      	str	r3, [sp, #16]
 80047a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047a8:	4825      	ldr	r0, [pc, #148]	; (8004840 <_svfiprintf_r+0x1ec>)
 80047aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047ae:	2206      	movs	r2, #6
 80047b0:	f7fb fd16 	bl	80001e0 <memchr>
 80047b4:	2800      	cmp	r0, #0
 80047b6:	d038      	beq.n	800482a <_svfiprintf_r+0x1d6>
 80047b8:	4b22      	ldr	r3, [pc, #136]	; (8004844 <_svfiprintf_r+0x1f0>)
 80047ba:	bb1b      	cbnz	r3, 8004804 <_svfiprintf_r+0x1b0>
 80047bc:	9b03      	ldr	r3, [sp, #12]
 80047be:	3307      	adds	r3, #7
 80047c0:	f023 0307 	bic.w	r3, r3, #7
 80047c4:	3308      	adds	r3, #8
 80047c6:	9303      	str	r3, [sp, #12]
 80047c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047ca:	4433      	add	r3, r6
 80047cc:	9309      	str	r3, [sp, #36]	; 0x24
 80047ce:	e768      	b.n	80046a2 <_svfiprintf_r+0x4e>
 80047d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80047d4:	460c      	mov	r4, r1
 80047d6:	2001      	movs	r0, #1
 80047d8:	e7a6      	b.n	8004728 <_svfiprintf_r+0xd4>
 80047da:	2300      	movs	r3, #0
 80047dc:	3401      	adds	r4, #1
 80047de:	9305      	str	r3, [sp, #20]
 80047e0:	4619      	mov	r1, r3
 80047e2:	f04f 0c0a 	mov.w	ip, #10
 80047e6:	4620      	mov	r0, r4
 80047e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047ec:	3a30      	subs	r2, #48	; 0x30
 80047ee:	2a09      	cmp	r2, #9
 80047f0:	d903      	bls.n	80047fa <_svfiprintf_r+0x1a6>
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0c6      	beq.n	8004784 <_svfiprintf_r+0x130>
 80047f6:	9105      	str	r1, [sp, #20]
 80047f8:	e7c4      	b.n	8004784 <_svfiprintf_r+0x130>
 80047fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80047fe:	4604      	mov	r4, r0
 8004800:	2301      	movs	r3, #1
 8004802:	e7f0      	b.n	80047e6 <_svfiprintf_r+0x192>
 8004804:	ab03      	add	r3, sp, #12
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	462a      	mov	r2, r5
 800480a:	4b0f      	ldr	r3, [pc, #60]	; (8004848 <_svfiprintf_r+0x1f4>)
 800480c:	a904      	add	r1, sp, #16
 800480e:	4638      	mov	r0, r7
 8004810:	f3af 8000 	nop.w
 8004814:	1c42      	adds	r2, r0, #1
 8004816:	4606      	mov	r6, r0
 8004818:	d1d6      	bne.n	80047c8 <_svfiprintf_r+0x174>
 800481a:	89ab      	ldrh	r3, [r5, #12]
 800481c:	065b      	lsls	r3, r3, #25
 800481e:	f53f af2d 	bmi.w	800467c <_svfiprintf_r+0x28>
 8004822:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004824:	b01d      	add	sp, #116	; 0x74
 8004826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800482a:	ab03      	add	r3, sp, #12
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	462a      	mov	r2, r5
 8004830:	4b05      	ldr	r3, [pc, #20]	; (8004848 <_svfiprintf_r+0x1f4>)
 8004832:	a904      	add	r1, sp, #16
 8004834:	4638      	mov	r0, r7
 8004836:	f000 f879 	bl	800492c <_printf_i>
 800483a:	e7eb      	b.n	8004814 <_svfiprintf_r+0x1c0>
 800483c:	08004cf8 	.word	0x08004cf8
 8004840:	08004d02 	.word	0x08004d02
 8004844:	00000000 	.word	0x00000000
 8004848:	080045a1 	.word	0x080045a1
 800484c:	08004cfe 	.word	0x08004cfe

08004850 <_printf_common>:
 8004850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004854:	4616      	mov	r6, r2
 8004856:	4699      	mov	r9, r3
 8004858:	688a      	ldr	r2, [r1, #8]
 800485a:	690b      	ldr	r3, [r1, #16]
 800485c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004860:	4293      	cmp	r3, r2
 8004862:	bfb8      	it	lt
 8004864:	4613      	movlt	r3, r2
 8004866:	6033      	str	r3, [r6, #0]
 8004868:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800486c:	4607      	mov	r7, r0
 800486e:	460c      	mov	r4, r1
 8004870:	b10a      	cbz	r2, 8004876 <_printf_common+0x26>
 8004872:	3301      	adds	r3, #1
 8004874:	6033      	str	r3, [r6, #0]
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	0699      	lsls	r1, r3, #26
 800487a:	bf42      	ittt	mi
 800487c:	6833      	ldrmi	r3, [r6, #0]
 800487e:	3302      	addmi	r3, #2
 8004880:	6033      	strmi	r3, [r6, #0]
 8004882:	6825      	ldr	r5, [r4, #0]
 8004884:	f015 0506 	ands.w	r5, r5, #6
 8004888:	d106      	bne.n	8004898 <_printf_common+0x48>
 800488a:	f104 0a19 	add.w	sl, r4, #25
 800488e:	68e3      	ldr	r3, [r4, #12]
 8004890:	6832      	ldr	r2, [r6, #0]
 8004892:	1a9b      	subs	r3, r3, r2
 8004894:	42ab      	cmp	r3, r5
 8004896:	dc26      	bgt.n	80048e6 <_printf_common+0x96>
 8004898:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800489c:	1e13      	subs	r3, r2, #0
 800489e:	6822      	ldr	r2, [r4, #0]
 80048a0:	bf18      	it	ne
 80048a2:	2301      	movne	r3, #1
 80048a4:	0692      	lsls	r2, r2, #26
 80048a6:	d42b      	bmi.n	8004900 <_printf_common+0xb0>
 80048a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048ac:	4649      	mov	r1, r9
 80048ae:	4638      	mov	r0, r7
 80048b0:	47c0      	blx	r8
 80048b2:	3001      	adds	r0, #1
 80048b4:	d01e      	beq.n	80048f4 <_printf_common+0xa4>
 80048b6:	6823      	ldr	r3, [r4, #0]
 80048b8:	6922      	ldr	r2, [r4, #16]
 80048ba:	f003 0306 	and.w	r3, r3, #6
 80048be:	2b04      	cmp	r3, #4
 80048c0:	bf02      	ittt	eq
 80048c2:	68e5      	ldreq	r5, [r4, #12]
 80048c4:	6833      	ldreq	r3, [r6, #0]
 80048c6:	1aed      	subeq	r5, r5, r3
 80048c8:	68a3      	ldr	r3, [r4, #8]
 80048ca:	bf0c      	ite	eq
 80048cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048d0:	2500      	movne	r5, #0
 80048d2:	4293      	cmp	r3, r2
 80048d4:	bfc4      	itt	gt
 80048d6:	1a9b      	subgt	r3, r3, r2
 80048d8:	18ed      	addgt	r5, r5, r3
 80048da:	2600      	movs	r6, #0
 80048dc:	341a      	adds	r4, #26
 80048de:	42b5      	cmp	r5, r6
 80048e0:	d11a      	bne.n	8004918 <_printf_common+0xc8>
 80048e2:	2000      	movs	r0, #0
 80048e4:	e008      	b.n	80048f8 <_printf_common+0xa8>
 80048e6:	2301      	movs	r3, #1
 80048e8:	4652      	mov	r2, sl
 80048ea:	4649      	mov	r1, r9
 80048ec:	4638      	mov	r0, r7
 80048ee:	47c0      	blx	r8
 80048f0:	3001      	adds	r0, #1
 80048f2:	d103      	bne.n	80048fc <_printf_common+0xac>
 80048f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048fc:	3501      	adds	r5, #1
 80048fe:	e7c6      	b.n	800488e <_printf_common+0x3e>
 8004900:	18e1      	adds	r1, r4, r3
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	2030      	movs	r0, #48	; 0x30
 8004906:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800490a:	4422      	add	r2, r4
 800490c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004910:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004914:	3302      	adds	r3, #2
 8004916:	e7c7      	b.n	80048a8 <_printf_common+0x58>
 8004918:	2301      	movs	r3, #1
 800491a:	4622      	mov	r2, r4
 800491c:	4649      	mov	r1, r9
 800491e:	4638      	mov	r0, r7
 8004920:	47c0      	blx	r8
 8004922:	3001      	adds	r0, #1
 8004924:	d0e6      	beq.n	80048f4 <_printf_common+0xa4>
 8004926:	3601      	adds	r6, #1
 8004928:	e7d9      	b.n	80048de <_printf_common+0x8e>
	...

0800492c <_printf_i>:
 800492c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004930:	7e0f      	ldrb	r7, [r1, #24]
 8004932:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004934:	2f78      	cmp	r7, #120	; 0x78
 8004936:	4691      	mov	r9, r2
 8004938:	4680      	mov	r8, r0
 800493a:	460c      	mov	r4, r1
 800493c:	469a      	mov	sl, r3
 800493e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004942:	d807      	bhi.n	8004954 <_printf_i+0x28>
 8004944:	2f62      	cmp	r7, #98	; 0x62
 8004946:	d80a      	bhi.n	800495e <_printf_i+0x32>
 8004948:	2f00      	cmp	r7, #0
 800494a:	f000 80d4 	beq.w	8004af6 <_printf_i+0x1ca>
 800494e:	2f58      	cmp	r7, #88	; 0x58
 8004950:	f000 80c0 	beq.w	8004ad4 <_printf_i+0x1a8>
 8004954:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004958:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800495c:	e03a      	b.n	80049d4 <_printf_i+0xa8>
 800495e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004962:	2b15      	cmp	r3, #21
 8004964:	d8f6      	bhi.n	8004954 <_printf_i+0x28>
 8004966:	a101      	add	r1, pc, #4	; (adr r1, 800496c <_printf_i+0x40>)
 8004968:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800496c:	080049c5 	.word	0x080049c5
 8004970:	080049d9 	.word	0x080049d9
 8004974:	08004955 	.word	0x08004955
 8004978:	08004955 	.word	0x08004955
 800497c:	08004955 	.word	0x08004955
 8004980:	08004955 	.word	0x08004955
 8004984:	080049d9 	.word	0x080049d9
 8004988:	08004955 	.word	0x08004955
 800498c:	08004955 	.word	0x08004955
 8004990:	08004955 	.word	0x08004955
 8004994:	08004955 	.word	0x08004955
 8004998:	08004add 	.word	0x08004add
 800499c:	08004a05 	.word	0x08004a05
 80049a0:	08004a97 	.word	0x08004a97
 80049a4:	08004955 	.word	0x08004955
 80049a8:	08004955 	.word	0x08004955
 80049ac:	08004aff 	.word	0x08004aff
 80049b0:	08004955 	.word	0x08004955
 80049b4:	08004a05 	.word	0x08004a05
 80049b8:	08004955 	.word	0x08004955
 80049bc:	08004955 	.word	0x08004955
 80049c0:	08004a9f 	.word	0x08004a9f
 80049c4:	682b      	ldr	r3, [r5, #0]
 80049c6:	1d1a      	adds	r2, r3, #4
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	602a      	str	r2, [r5, #0]
 80049cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049d4:	2301      	movs	r3, #1
 80049d6:	e09f      	b.n	8004b18 <_printf_i+0x1ec>
 80049d8:	6820      	ldr	r0, [r4, #0]
 80049da:	682b      	ldr	r3, [r5, #0]
 80049dc:	0607      	lsls	r7, r0, #24
 80049de:	f103 0104 	add.w	r1, r3, #4
 80049e2:	6029      	str	r1, [r5, #0]
 80049e4:	d501      	bpl.n	80049ea <_printf_i+0xbe>
 80049e6:	681e      	ldr	r6, [r3, #0]
 80049e8:	e003      	b.n	80049f2 <_printf_i+0xc6>
 80049ea:	0646      	lsls	r6, r0, #25
 80049ec:	d5fb      	bpl.n	80049e6 <_printf_i+0xba>
 80049ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80049f2:	2e00      	cmp	r6, #0
 80049f4:	da03      	bge.n	80049fe <_printf_i+0xd2>
 80049f6:	232d      	movs	r3, #45	; 0x2d
 80049f8:	4276      	negs	r6, r6
 80049fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049fe:	485a      	ldr	r0, [pc, #360]	; (8004b68 <_printf_i+0x23c>)
 8004a00:	230a      	movs	r3, #10
 8004a02:	e012      	b.n	8004a2a <_printf_i+0xfe>
 8004a04:	682b      	ldr	r3, [r5, #0]
 8004a06:	6820      	ldr	r0, [r4, #0]
 8004a08:	1d19      	adds	r1, r3, #4
 8004a0a:	6029      	str	r1, [r5, #0]
 8004a0c:	0605      	lsls	r5, r0, #24
 8004a0e:	d501      	bpl.n	8004a14 <_printf_i+0xe8>
 8004a10:	681e      	ldr	r6, [r3, #0]
 8004a12:	e002      	b.n	8004a1a <_printf_i+0xee>
 8004a14:	0641      	lsls	r1, r0, #25
 8004a16:	d5fb      	bpl.n	8004a10 <_printf_i+0xe4>
 8004a18:	881e      	ldrh	r6, [r3, #0]
 8004a1a:	4853      	ldr	r0, [pc, #332]	; (8004b68 <_printf_i+0x23c>)
 8004a1c:	2f6f      	cmp	r7, #111	; 0x6f
 8004a1e:	bf0c      	ite	eq
 8004a20:	2308      	moveq	r3, #8
 8004a22:	230a      	movne	r3, #10
 8004a24:	2100      	movs	r1, #0
 8004a26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a2a:	6865      	ldr	r5, [r4, #4]
 8004a2c:	60a5      	str	r5, [r4, #8]
 8004a2e:	2d00      	cmp	r5, #0
 8004a30:	bfa2      	ittt	ge
 8004a32:	6821      	ldrge	r1, [r4, #0]
 8004a34:	f021 0104 	bicge.w	r1, r1, #4
 8004a38:	6021      	strge	r1, [r4, #0]
 8004a3a:	b90e      	cbnz	r6, 8004a40 <_printf_i+0x114>
 8004a3c:	2d00      	cmp	r5, #0
 8004a3e:	d04b      	beq.n	8004ad8 <_printf_i+0x1ac>
 8004a40:	4615      	mov	r5, r2
 8004a42:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a46:	fb03 6711 	mls	r7, r3, r1, r6
 8004a4a:	5dc7      	ldrb	r7, [r0, r7]
 8004a4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a50:	4637      	mov	r7, r6
 8004a52:	42bb      	cmp	r3, r7
 8004a54:	460e      	mov	r6, r1
 8004a56:	d9f4      	bls.n	8004a42 <_printf_i+0x116>
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d10b      	bne.n	8004a74 <_printf_i+0x148>
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	07de      	lsls	r6, r3, #31
 8004a60:	d508      	bpl.n	8004a74 <_printf_i+0x148>
 8004a62:	6923      	ldr	r3, [r4, #16]
 8004a64:	6861      	ldr	r1, [r4, #4]
 8004a66:	4299      	cmp	r1, r3
 8004a68:	bfde      	ittt	le
 8004a6a:	2330      	movle	r3, #48	; 0x30
 8004a6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a70:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004a74:	1b52      	subs	r2, r2, r5
 8004a76:	6122      	str	r2, [r4, #16]
 8004a78:	f8cd a000 	str.w	sl, [sp]
 8004a7c:	464b      	mov	r3, r9
 8004a7e:	aa03      	add	r2, sp, #12
 8004a80:	4621      	mov	r1, r4
 8004a82:	4640      	mov	r0, r8
 8004a84:	f7ff fee4 	bl	8004850 <_printf_common>
 8004a88:	3001      	adds	r0, #1
 8004a8a:	d14a      	bne.n	8004b22 <_printf_i+0x1f6>
 8004a8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a90:	b004      	add	sp, #16
 8004a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	f043 0320 	orr.w	r3, r3, #32
 8004a9c:	6023      	str	r3, [r4, #0]
 8004a9e:	4833      	ldr	r0, [pc, #204]	; (8004b6c <_printf_i+0x240>)
 8004aa0:	2778      	movs	r7, #120	; 0x78
 8004aa2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	6829      	ldr	r1, [r5, #0]
 8004aaa:	061f      	lsls	r7, r3, #24
 8004aac:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ab0:	d402      	bmi.n	8004ab8 <_printf_i+0x18c>
 8004ab2:	065f      	lsls	r7, r3, #25
 8004ab4:	bf48      	it	mi
 8004ab6:	b2b6      	uxthmi	r6, r6
 8004ab8:	07df      	lsls	r7, r3, #31
 8004aba:	bf48      	it	mi
 8004abc:	f043 0320 	orrmi.w	r3, r3, #32
 8004ac0:	6029      	str	r1, [r5, #0]
 8004ac2:	bf48      	it	mi
 8004ac4:	6023      	strmi	r3, [r4, #0]
 8004ac6:	b91e      	cbnz	r6, 8004ad0 <_printf_i+0x1a4>
 8004ac8:	6823      	ldr	r3, [r4, #0]
 8004aca:	f023 0320 	bic.w	r3, r3, #32
 8004ace:	6023      	str	r3, [r4, #0]
 8004ad0:	2310      	movs	r3, #16
 8004ad2:	e7a7      	b.n	8004a24 <_printf_i+0xf8>
 8004ad4:	4824      	ldr	r0, [pc, #144]	; (8004b68 <_printf_i+0x23c>)
 8004ad6:	e7e4      	b.n	8004aa2 <_printf_i+0x176>
 8004ad8:	4615      	mov	r5, r2
 8004ada:	e7bd      	b.n	8004a58 <_printf_i+0x12c>
 8004adc:	682b      	ldr	r3, [r5, #0]
 8004ade:	6826      	ldr	r6, [r4, #0]
 8004ae0:	6961      	ldr	r1, [r4, #20]
 8004ae2:	1d18      	adds	r0, r3, #4
 8004ae4:	6028      	str	r0, [r5, #0]
 8004ae6:	0635      	lsls	r5, r6, #24
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	d501      	bpl.n	8004af0 <_printf_i+0x1c4>
 8004aec:	6019      	str	r1, [r3, #0]
 8004aee:	e002      	b.n	8004af6 <_printf_i+0x1ca>
 8004af0:	0670      	lsls	r0, r6, #25
 8004af2:	d5fb      	bpl.n	8004aec <_printf_i+0x1c0>
 8004af4:	8019      	strh	r1, [r3, #0]
 8004af6:	2300      	movs	r3, #0
 8004af8:	6123      	str	r3, [r4, #16]
 8004afa:	4615      	mov	r5, r2
 8004afc:	e7bc      	b.n	8004a78 <_printf_i+0x14c>
 8004afe:	682b      	ldr	r3, [r5, #0]
 8004b00:	1d1a      	adds	r2, r3, #4
 8004b02:	602a      	str	r2, [r5, #0]
 8004b04:	681d      	ldr	r5, [r3, #0]
 8004b06:	6862      	ldr	r2, [r4, #4]
 8004b08:	2100      	movs	r1, #0
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	f7fb fb68 	bl	80001e0 <memchr>
 8004b10:	b108      	cbz	r0, 8004b16 <_printf_i+0x1ea>
 8004b12:	1b40      	subs	r0, r0, r5
 8004b14:	6060      	str	r0, [r4, #4]
 8004b16:	6863      	ldr	r3, [r4, #4]
 8004b18:	6123      	str	r3, [r4, #16]
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b20:	e7aa      	b.n	8004a78 <_printf_i+0x14c>
 8004b22:	6923      	ldr	r3, [r4, #16]
 8004b24:	462a      	mov	r2, r5
 8004b26:	4649      	mov	r1, r9
 8004b28:	4640      	mov	r0, r8
 8004b2a:	47d0      	blx	sl
 8004b2c:	3001      	adds	r0, #1
 8004b2e:	d0ad      	beq.n	8004a8c <_printf_i+0x160>
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	079b      	lsls	r3, r3, #30
 8004b34:	d413      	bmi.n	8004b5e <_printf_i+0x232>
 8004b36:	68e0      	ldr	r0, [r4, #12]
 8004b38:	9b03      	ldr	r3, [sp, #12]
 8004b3a:	4298      	cmp	r0, r3
 8004b3c:	bfb8      	it	lt
 8004b3e:	4618      	movlt	r0, r3
 8004b40:	e7a6      	b.n	8004a90 <_printf_i+0x164>
 8004b42:	2301      	movs	r3, #1
 8004b44:	4632      	mov	r2, r6
 8004b46:	4649      	mov	r1, r9
 8004b48:	4640      	mov	r0, r8
 8004b4a:	47d0      	blx	sl
 8004b4c:	3001      	adds	r0, #1
 8004b4e:	d09d      	beq.n	8004a8c <_printf_i+0x160>
 8004b50:	3501      	adds	r5, #1
 8004b52:	68e3      	ldr	r3, [r4, #12]
 8004b54:	9903      	ldr	r1, [sp, #12]
 8004b56:	1a5b      	subs	r3, r3, r1
 8004b58:	42ab      	cmp	r3, r5
 8004b5a:	dcf2      	bgt.n	8004b42 <_printf_i+0x216>
 8004b5c:	e7eb      	b.n	8004b36 <_printf_i+0x20a>
 8004b5e:	2500      	movs	r5, #0
 8004b60:	f104 0619 	add.w	r6, r4, #25
 8004b64:	e7f5      	b.n	8004b52 <_printf_i+0x226>
 8004b66:	bf00      	nop
 8004b68:	08004d09 	.word	0x08004d09
 8004b6c:	08004d1a 	.word	0x08004d1a

08004b70 <memmove>:
 8004b70:	4288      	cmp	r0, r1
 8004b72:	b510      	push	{r4, lr}
 8004b74:	eb01 0402 	add.w	r4, r1, r2
 8004b78:	d902      	bls.n	8004b80 <memmove+0x10>
 8004b7a:	4284      	cmp	r4, r0
 8004b7c:	4623      	mov	r3, r4
 8004b7e:	d807      	bhi.n	8004b90 <memmove+0x20>
 8004b80:	1e43      	subs	r3, r0, #1
 8004b82:	42a1      	cmp	r1, r4
 8004b84:	d008      	beq.n	8004b98 <memmove+0x28>
 8004b86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b8e:	e7f8      	b.n	8004b82 <memmove+0x12>
 8004b90:	4402      	add	r2, r0
 8004b92:	4601      	mov	r1, r0
 8004b94:	428a      	cmp	r2, r1
 8004b96:	d100      	bne.n	8004b9a <memmove+0x2a>
 8004b98:	bd10      	pop	{r4, pc}
 8004b9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ba2:	e7f7      	b.n	8004b94 <memmove+0x24>

08004ba4 <_sbrk_r>:
 8004ba4:	b538      	push	{r3, r4, r5, lr}
 8004ba6:	4d06      	ldr	r5, [pc, #24]	; (8004bc0 <_sbrk_r+0x1c>)
 8004ba8:	2300      	movs	r3, #0
 8004baa:	4604      	mov	r4, r0
 8004bac:	4608      	mov	r0, r1
 8004bae:	602b      	str	r3, [r5, #0]
 8004bb0:	f7fb ff14 	bl	80009dc <_sbrk>
 8004bb4:	1c43      	adds	r3, r0, #1
 8004bb6:	d102      	bne.n	8004bbe <_sbrk_r+0x1a>
 8004bb8:	682b      	ldr	r3, [r5, #0]
 8004bba:	b103      	cbz	r3, 8004bbe <_sbrk_r+0x1a>
 8004bbc:	6023      	str	r3, [r4, #0]
 8004bbe:	bd38      	pop	{r3, r4, r5, pc}
 8004bc0:	200002c4 	.word	0x200002c4

08004bc4 <memcpy>:
 8004bc4:	440a      	add	r2, r1
 8004bc6:	4291      	cmp	r1, r2
 8004bc8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004bcc:	d100      	bne.n	8004bd0 <memcpy+0xc>
 8004bce:	4770      	bx	lr
 8004bd0:	b510      	push	{r4, lr}
 8004bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bda:	4291      	cmp	r1, r2
 8004bdc:	d1f9      	bne.n	8004bd2 <memcpy+0xe>
 8004bde:	bd10      	pop	{r4, pc}

08004be0 <_realloc_r>:
 8004be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004be4:	4680      	mov	r8, r0
 8004be6:	4614      	mov	r4, r2
 8004be8:	460e      	mov	r6, r1
 8004bea:	b921      	cbnz	r1, 8004bf6 <_realloc_r+0x16>
 8004bec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf0:	4611      	mov	r1, r2
 8004bf2:	f7ff bc49 	b.w	8004488 <_malloc_r>
 8004bf6:	b92a      	cbnz	r2, 8004c04 <_realloc_r+0x24>
 8004bf8:	f7ff fbda 	bl	80043b0 <_free_r>
 8004bfc:	4625      	mov	r5, r4
 8004bfe:	4628      	mov	r0, r5
 8004c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c04:	f000 f81b 	bl	8004c3e <_malloc_usable_size_r>
 8004c08:	4284      	cmp	r4, r0
 8004c0a:	4607      	mov	r7, r0
 8004c0c:	d802      	bhi.n	8004c14 <_realloc_r+0x34>
 8004c0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004c12:	d812      	bhi.n	8004c3a <_realloc_r+0x5a>
 8004c14:	4621      	mov	r1, r4
 8004c16:	4640      	mov	r0, r8
 8004c18:	f7ff fc36 	bl	8004488 <_malloc_r>
 8004c1c:	4605      	mov	r5, r0
 8004c1e:	2800      	cmp	r0, #0
 8004c20:	d0ed      	beq.n	8004bfe <_realloc_r+0x1e>
 8004c22:	42bc      	cmp	r4, r7
 8004c24:	4622      	mov	r2, r4
 8004c26:	4631      	mov	r1, r6
 8004c28:	bf28      	it	cs
 8004c2a:	463a      	movcs	r2, r7
 8004c2c:	f7ff ffca 	bl	8004bc4 <memcpy>
 8004c30:	4631      	mov	r1, r6
 8004c32:	4640      	mov	r0, r8
 8004c34:	f7ff fbbc 	bl	80043b0 <_free_r>
 8004c38:	e7e1      	b.n	8004bfe <_realloc_r+0x1e>
 8004c3a:	4635      	mov	r5, r6
 8004c3c:	e7df      	b.n	8004bfe <_realloc_r+0x1e>

08004c3e <_malloc_usable_size_r>:
 8004c3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c42:	1f18      	subs	r0, r3, #4
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	bfbc      	itt	lt
 8004c48:	580b      	ldrlt	r3, [r1, r0]
 8004c4a:	18c0      	addlt	r0, r0, r3
 8004c4c:	4770      	bx	lr
	...

08004c50 <_init>:
 8004c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c52:	bf00      	nop
 8004c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c56:	bc08      	pop	{r3}
 8004c58:	469e      	mov	lr, r3
 8004c5a:	4770      	bx	lr

08004c5c <_fini>:
 8004c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5e:	bf00      	nop
 8004c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c62:	bc08      	pop	{r3}
 8004c64:	469e      	mov	lr, r3
 8004c66:	4770      	bx	lr
